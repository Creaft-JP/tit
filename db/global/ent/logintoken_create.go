// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/global/ent/logintoken"
)

// LoginTokenCreate is the builder for creating a LoginToken entity.
type LoginTokenCreate struct {
	config
	mutation *LoginTokenMutation
	hooks    []Hook
}

// SetSignInUserSlug sets the "sign_in_user_slug" field.
func (ltc *LoginTokenCreate) SetSignInUserSlug(s string) *LoginTokenCreate {
	ltc.mutation.SetSignInUserSlug(s)
	return ltc
}

// SetCliLoginToken sets the "cli_login_token" field.
func (ltc *LoginTokenCreate) SetCliLoginToken(s string) *LoginTokenCreate {
	ltc.mutation.SetCliLoginToken(s)
	return ltc
}

// Mutation returns the LoginTokenMutation object of the builder.
func (ltc *LoginTokenCreate) Mutation() *LoginTokenMutation {
	return ltc.mutation
}

// Save creates the LoginToken in the database.
func (ltc *LoginTokenCreate) Save(ctx context.Context) (*LoginToken, error) {
	return withHooks(ctx, ltc.sqlSave, ltc.mutation, ltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LoginTokenCreate) SaveX(ctx context.Context) *LoginToken {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LoginTokenCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LoginTokenCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LoginTokenCreate) check() error {
	if _, ok := ltc.mutation.SignInUserSlug(); !ok {
		return &ValidationError{Name: "sign_in_user_slug", err: errors.New(`ent: missing required field "LoginToken.sign_in_user_slug"`)}
	}
	if v, ok := ltc.mutation.SignInUserSlug(); ok {
		if err := logintoken.SignInUserSlugValidator(v); err != nil {
			return &ValidationError{Name: "sign_in_user_slug", err: fmt.Errorf(`ent: validator failed for field "LoginToken.sign_in_user_slug": %w`, err)}
		}
	}
	if _, ok := ltc.mutation.CliLoginToken(); !ok {
		return &ValidationError{Name: "cli_login_token", err: errors.New(`ent: missing required field "LoginToken.cli_login_token"`)}
	}
	if v, ok := ltc.mutation.CliLoginToken(); ok {
		if err := logintoken.CliLoginTokenValidator(v); err != nil {
			return &ValidationError{Name: "cli_login_token", err: fmt.Errorf(`ent: validator failed for field "LoginToken.cli_login_token": %w`, err)}
		}
	}
	return nil
}

func (ltc *LoginTokenCreate) sqlSave(ctx context.Context) (*LoginToken, error) {
	if err := ltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ltc.mutation.id = &_node.ID
	ltc.mutation.done = true
	return _node, nil
}

func (ltc *LoginTokenCreate) createSpec() (*LoginToken, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginToken{config: ltc.config}
		_spec = sqlgraph.NewCreateSpec(logintoken.Table, sqlgraph.NewFieldSpec(logintoken.FieldID, field.TypeInt))
	)
	if value, ok := ltc.mutation.SignInUserSlug(); ok {
		_spec.SetField(logintoken.FieldSignInUserSlug, field.TypeString, value)
		_node.SignInUserSlug = value
	}
	if value, ok := ltc.mutation.CliLoginToken(); ok {
		_spec.SetField(logintoken.FieldCliLoginToken, field.TypeString, value)
		_node.CliLoginToken = value
	}
	return _node, _spec
}

// LoginTokenCreateBulk is the builder for creating many LoginToken entities in bulk.
type LoginTokenCreateBulk struct {
	config
	builders []*LoginTokenCreate
}

// Save creates the LoginToken entities in the database.
func (ltcb *LoginTokenCreateBulk) Save(ctx context.Context) ([]*LoginToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LoginToken, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LoginTokenCreateBulk) SaveX(ctx context.Context) []*LoginToken {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LoginTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LoginTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}
