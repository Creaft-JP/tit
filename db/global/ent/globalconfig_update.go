// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/global/ent/globalconfig"
	"github.com/Creaft-JP/tit/db/global/ent/predicate"
)

// GlobalConfigUpdate is the builder for updating GlobalConfig entities.
type GlobalConfigUpdate struct {
	config
	hooks    []Hook
	mutation *GlobalConfigMutation
}

// Where appends a list predicates to the GlobalConfigUpdate builder.
func (gcu *GlobalConfigUpdate) Where(ps ...predicate.GlobalConfig) *GlobalConfigUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetKey sets the "key" field.
func (gcu *GlobalConfigUpdate) SetKey(s string) *GlobalConfigUpdate {
	gcu.mutation.SetKey(s)
	return gcu
}

// SetValue sets the "value" field.
func (gcu *GlobalConfigUpdate) SetValue(s string) *GlobalConfigUpdate {
	gcu.mutation.SetValue(s)
	return gcu
}

// Mutation returns the GlobalConfigMutation object of the builder.
func (gcu *GlobalConfigUpdate) Mutation() *GlobalConfigMutation {
	return gcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GlobalConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gcu.sqlSave, gcu.mutation, gcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GlobalConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GlobalConfigUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GlobalConfigUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gcu *GlobalConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(globalconfig.Table, globalconfig.Columns, sqlgraph.NewFieldSpec(globalconfig.FieldID, field.TypeInt))
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.Key(); ok {
		_spec.SetField(globalconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := gcu.mutation.Value(); ok {
		_spec.SetField(globalconfig.FieldValue, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globalconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gcu.mutation.done = true
	return n, nil
}

// GlobalConfigUpdateOne is the builder for updating a single GlobalConfig entity.
type GlobalConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GlobalConfigMutation
}

// SetKey sets the "key" field.
func (gcuo *GlobalConfigUpdateOne) SetKey(s string) *GlobalConfigUpdateOne {
	gcuo.mutation.SetKey(s)
	return gcuo
}

// SetValue sets the "value" field.
func (gcuo *GlobalConfigUpdateOne) SetValue(s string) *GlobalConfigUpdateOne {
	gcuo.mutation.SetValue(s)
	return gcuo
}

// Mutation returns the GlobalConfigMutation object of the builder.
func (gcuo *GlobalConfigUpdateOne) Mutation() *GlobalConfigMutation {
	return gcuo.mutation
}

// Where appends a list predicates to the GlobalConfigUpdate builder.
func (gcuo *GlobalConfigUpdateOne) Where(ps ...predicate.GlobalConfig) *GlobalConfigUpdateOne {
	gcuo.mutation.Where(ps...)
	return gcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GlobalConfigUpdateOne) Select(field string, fields ...string) *GlobalConfigUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GlobalConfig entity.
func (gcuo *GlobalConfigUpdateOne) Save(ctx context.Context) (*GlobalConfig, error) {
	return withHooks(ctx, gcuo.sqlSave, gcuo.mutation, gcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GlobalConfigUpdateOne) SaveX(ctx context.Context) *GlobalConfig {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GlobalConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GlobalConfigUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gcuo *GlobalConfigUpdateOne) sqlSave(ctx context.Context) (_node *GlobalConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(globalconfig.Table, globalconfig.Columns, sqlgraph.NewFieldSpec(globalconfig.FieldID, field.TypeInt))
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GlobalConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, globalconfig.FieldID)
		for _, f := range fields {
			if !globalconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != globalconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.Key(); ok {
		_spec.SetField(globalconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := gcuo.mutation.Value(); ok {
		_spec.SetField(globalconfig.FieldValue, field.TypeString, value)
	}
	_node = &GlobalConfig{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globalconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gcuo.mutation.done = true
	return _node, nil
}
