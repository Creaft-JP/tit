// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/global/ent/globalconfig"
	"github.com/Creaft-JP/tit/db/global/ent/predicate"
)

// GlobalConfigDelete is the builder for deleting a GlobalConfig entity.
type GlobalConfigDelete struct {
	config
	hooks    []Hook
	mutation *GlobalConfigMutation
}

// Where appends a list predicates to the GlobalConfigDelete builder.
func (gcd *GlobalConfigDelete) Where(ps ...predicate.GlobalConfig) *GlobalConfigDelete {
	gcd.mutation.Where(ps...)
	return gcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gcd *GlobalConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gcd.sqlExec, gcd.mutation, gcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gcd *GlobalConfigDelete) ExecX(ctx context.Context) int {
	n, err := gcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gcd *GlobalConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(globalconfig.Table, sqlgraph.NewFieldSpec(globalconfig.FieldID, field.TypeInt))
	if ps := gcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gcd.mutation.done = true
	return affected, err
}

// GlobalConfigDeleteOne is the builder for deleting a single GlobalConfig entity.
type GlobalConfigDeleteOne struct {
	gcd *GlobalConfigDelete
}

// Where appends a list predicates to the GlobalConfigDelete builder.
func (gcdo *GlobalConfigDeleteOne) Where(ps ...predicate.GlobalConfig) *GlobalConfigDeleteOne {
	gcdo.gcd.mutation.Where(ps...)
	return gcdo
}

// Exec executes the deletion query.
func (gcdo *GlobalConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := gcdo.gcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{globalconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gcdo *GlobalConfigDeleteOne) ExecX(ctx context.Context) {
	if err := gcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
