// Code generated by ent, DO NOT EDIT.

package logintoken

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Creaft-JP/tit/db/global/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldLTE(FieldID, id))
}

// SignInUserSlug applies equality check predicate on the "sign_in_user_slug" field. It's identical to SignInUserSlugEQ.
func SignInUserSlug(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEQ(FieldSignInUserSlug, v))
}

// CliLoginToken applies equality check predicate on the "cli_login_token" field. It's identical to CliLoginTokenEQ.
func CliLoginToken(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEQ(FieldCliLoginToken, v))
}

// SignInUserSlugEQ applies the EQ predicate on the "sign_in_user_slug" field.
func SignInUserSlugEQ(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEQ(FieldSignInUserSlug, v))
}

// SignInUserSlugNEQ applies the NEQ predicate on the "sign_in_user_slug" field.
func SignInUserSlugNEQ(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldNEQ(FieldSignInUserSlug, v))
}

// SignInUserSlugIn applies the In predicate on the "sign_in_user_slug" field.
func SignInUserSlugIn(vs ...string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldIn(FieldSignInUserSlug, vs...))
}

// SignInUserSlugNotIn applies the NotIn predicate on the "sign_in_user_slug" field.
func SignInUserSlugNotIn(vs ...string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldNotIn(FieldSignInUserSlug, vs...))
}

// SignInUserSlugGT applies the GT predicate on the "sign_in_user_slug" field.
func SignInUserSlugGT(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldGT(FieldSignInUserSlug, v))
}

// SignInUserSlugGTE applies the GTE predicate on the "sign_in_user_slug" field.
func SignInUserSlugGTE(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldGTE(FieldSignInUserSlug, v))
}

// SignInUserSlugLT applies the LT predicate on the "sign_in_user_slug" field.
func SignInUserSlugLT(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldLT(FieldSignInUserSlug, v))
}

// SignInUserSlugLTE applies the LTE predicate on the "sign_in_user_slug" field.
func SignInUserSlugLTE(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldLTE(FieldSignInUserSlug, v))
}

// SignInUserSlugContains applies the Contains predicate on the "sign_in_user_slug" field.
func SignInUserSlugContains(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldContains(FieldSignInUserSlug, v))
}

// SignInUserSlugHasPrefix applies the HasPrefix predicate on the "sign_in_user_slug" field.
func SignInUserSlugHasPrefix(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldHasPrefix(FieldSignInUserSlug, v))
}

// SignInUserSlugHasSuffix applies the HasSuffix predicate on the "sign_in_user_slug" field.
func SignInUserSlugHasSuffix(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldHasSuffix(FieldSignInUserSlug, v))
}

// SignInUserSlugEqualFold applies the EqualFold predicate on the "sign_in_user_slug" field.
func SignInUserSlugEqualFold(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEqualFold(FieldSignInUserSlug, v))
}

// SignInUserSlugContainsFold applies the ContainsFold predicate on the "sign_in_user_slug" field.
func SignInUserSlugContainsFold(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldContainsFold(FieldSignInUserSlug, v))
}

// CliLoginTokenEQ applies the EQ predicate on the "cli_login_token" field.
func CliLoginTokenEQ(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEQ(FieldCliLoginToken, v))
}

// CliLoginTokenNEQ applies the NEQ predicate on the "cli_login_token" field.
func CliLoginTokenNEQ(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldNEQ(FieldCliLoginToken, v))
}

// CliLoginTokenIn applies the In predicate on the "cli_login_token" field.
func CliLoginTokenIn(vs ...string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldIn(FieldCliLoginToken, vs...))
}

// CliLoginTokenNotIn applies the NotIn predicate on the "cli_login_token" field.
func CliLoginTokenNotIn(vs ...string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldNotIn(FieldCliLoginToken, vs...))
}

// CliLoginTokenGT applies the GT predicate on the "cli_login_token" field.
func CliLoginTokenGT(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldGT(FieldCliLoginToken, v))
}

// CliLoginTokenGTE applies the GTE predicate on the "cli_login_token" field.
func CliLoginTokenGTE(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldGTE(FieldCliLoginToken, v))
}

// CliLoginTokenLT applies the LT predicate on the "cli_login_token" field.
func CliLoginTokenLT(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldLT(FieldCliLoginToken, v))
}

// CliLoginTokenLTE applies the LTE predicate on the "cli_login_token" field.
func CliLoginTokenLTE(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldLTE(FieldCliLoginToken, v))
}

// CliLoginTokenContains applies the Contains predicate on the "cli_login_token" field.
func CliLoginTokenContains(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldContains(FieldCliLoginToken, v))
}

// CliLoginTokenHasPrefix applies the HasPrefix predicate on the "cli_login_token" field.
func CliLoginTokenHasPrefix(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldHasPrefix(FieldCliLoginToken, v))
}

// CliLoginTokenHasSuffix applies the HasSuffix predicate on the "cli_login_token" field.
func CliLoginTokenHasSuffix(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldHasSuffix(FieldCliLoginToken, v))
}

// CliLoginTokenEqualFold applies the EqualFold predicate on the "cli_login_token" field.
func CliLoginTokenEqualFold(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldEqualFold(FieldCliLoginToken, v))
}

// CliLoginTokenContainsFold applies the ContainsFold predicate on the "cli_login_token" field.
func CliLoginTokenContainsFold(v string) predicate.LoginToken {
	return predicate.LoginToken(sql.FieldContainsFold(FieldCliLoginToken, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginToken) predicate.LoginToken {
	return predicate.LoginToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginToken) predicate.LoginToken {
	return predicate.LoginToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginToken) predicate.LoginToken {
	return predicate.LoginToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
