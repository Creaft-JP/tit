// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/commit"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
)

// CommittedFileUpdate is the builder for updating CommittedFile entities.
type CommittedFileUpdate struct {
	config
	hooks    []Hook
	mutation *CommittedFileMutation
}

// Where appends a list predicates to the CommittedFileUpdate builder.
func (cfu *CommittedFileUpdate) Where(ps ...predicate.CommittedFile) *CommittedFileUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetPath sets the "path" field.
func (cfu *CommittedFileUpdate) SetPath(s string) *CommittedFileUpdate {
	cfu.mutation.SetPath(s)
	return cfu
}

// SetContent sets the "content" field.
func (cfu *CommittedFileUpdate) SetContent(s string) *CommittedFileUpdate {
	cfu.mutation.SetContent(s)
	return cfu
}

// SetCommitID sets the "commit" edge to the Commit entity by ID.
func (cfu *CommittedFileUpdate) SetCommitID(id int) *CommittedFileUpdate {
	cfu.mutation.SetCommitID(id)
	return cfu
}

// SetNillableCommitID sets the "commit" edge to the Commit entity by ID if the given value is not nil.
func (cfu *CommittedFileUpdate) SetNillableCommitID(id *int) *CommittedFileUpdate {
	if id != nil {
		cfu = cfu.SetCommitID(*id)
	}
	return cfu
}

// SetCommit sets the "commit" edge to the Commit entity.
func (cfu *CommittedFileUpdate) SetCommit(c *Commit) *CommittedFileUpdate {
	return cfu.SetCommitID(c.ID)
}

// Mutation returns the CommittedFileMutation object of the builder.
func (cfu *CommittedFileUpdate) Mutation() *CommittedFileMutation {
	return cfu.mutation
}

// ClearCommit clears the "commit" edge to the Commit entity.
func (cfu *CommittedFileUpdate) ClearCommit() *CommittedFileUpdate {
	cfu.mutation.ClearCommit()
	return cfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CommittedFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cfu.sqlSave, cfu.mutation, cfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CommittedFileUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CommittedFileUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CommittedFileUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CommittedFileUpdate) check() error {
	if v, ok := cfu.mutation.Path(); ok {
		if err := committedfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "CommittedFile.path": %w`, err)}
		}
	}
	return nil
}

func (cfu *CommittedFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(committedfile.Table, committedfile.Columns, sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt))
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.Path(); ok {
		_spec.SetField(committedfile.FieldPath, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Content(); ok {
		_spec.SetField(committedfile.FieldContent, field.TypeString, value)
	}
	if cfu.mutation.CommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   committedfile.CommitTable,
			Columns: []string{committedfile.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.CommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   committedfile.CommitTable,
			Columns: []string{committedfile.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{committedfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cfu.mutation.done = true
	return n, nil
}

// CommittedFileUpdateOne is the builder for updating a single CommittedFile entity.
type CommittedFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommittedFileMutation
}

// SetPath sets the "path" field.
func (cfuo *CommittedFileUpdateOne) SetPath(s string) *CommittedFileUpdateOne {
	cfuo.mutation.SetPath(s)
	return cfuo
}

// SetContent sets the "content" field.
func (cfuo *CommittedFileUpdateOne) SetContent(s string) *CommittedFileUpdateOne {
	cfuo.mutation.SetContent(s)
	return cfuo
}

// SetCommitID sets the "commit" edge to the Commit entity by ID.
func (cfuo *CommittedFileUpdateOne) SetCommitID(id int) *CommittedFileUpdateOne {
	cfuo.mutation.SetCommitID(id)
	return cfuo
}

// SetNillableCommitID sets the "commit" edge to the Commit entity by ID if the given value is not nil.
func (cfuo *CommittedFileUpdateOne) SetNillableCommitID(id *int) *CommittedFileUpdateOne {
	if id != nil {
		cfuo = cfuo.SetCommitID(*id)
	}
	return cfuo
}

// SetCommit sets the "commit" edge to the Commit entity.
func (cfuo *CommittedFileUpdateOne) SetCommit(c *Commit) *CommittedFileUpdateOne {
	return cfuo.SetCommitID(c.ID)
}

// Mutation returns the CommittedFileMutation object of the builder.
func (cfuo *CommittedFileUpdateOne) Mutation() *CommittedFileMutation {
	return cfuo.mutation
}

// ClearCommit clears the "commit" edge to the Commit entity.
func (cfuo *CommittedFileUpdateOne) ClearCommit() *CommittedFileUpdateOne {
	cfuo.mutation.ClearCommit()
	return cfuo
}

// Where appends a list predicates to the CommittedFileUpdate builder.
func (cfuo *CommittedFileUpdateOne) Where(ps ...predicate.CommittedFile) *CommittedFileUpdateOne {
	cfuo.mutation.Where(ps...)
	return cfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CommittedFileUpdateOne) Select(field string, fields ...string) *CommittedFileUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CommittedFile entity.
func (cfuo *CommittedFileUpdateOne) Save(ctx context.Context) (*CommittedFile, error) {
	return withHooks(ctx, cfuo.sqlSave, cfuo.mutation, cfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CommittedFileUpdateOne) SaveX(ctx context.Context) *CommittedFile {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CommittedFileUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CommittedFileUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CommittedFileUpdateOne) check() error {
	if v, ok := cfuo.mutation.Path(); ok {
		if err := committedfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "CommittedFile.path": %w`, err)}
		}
	}
	return nil
}

func (cfuo *CommittedFileUpdateOne) sqlSave(ctx context.Context) (_node *CommittedFile, err error) {
	if err := cfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(committedfile.Table, committedfile.Columns, sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt))
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommittedFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, committedfile.FieldID)
		for _, f := range fields {
			if !committedfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != committedfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.Path(); ok {
		_spec.SetField(committedfile.FieldPath, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Content(); ok {
		_spec.SetField(committedfile.FieldContent, field.TypeString, value)
	}
	if cfuo.mutation.CommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   committedfile.CommitTable,
			Columns: []string{committedfile.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.CommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   committedfile.CommitTable,
			Columns: []string{committedfile.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommittedFile{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{committedfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cfuo.mutation.done = true
	return _node, nil
}
