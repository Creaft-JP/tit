// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
	"github.com/Creaft-JP/tit/db/local/ent/stagedfile"
)

// StagedFileDelete is the builder for deleting a StagedFile entity.
type StagedFileDelete struct {
	config
	hooks    []Hook
	mutation *StagedFileMutation
}

// Where appends a list predicates to the StagedFileDelete builder.
func (sfd *StagedFileDelete) Where(ps ...predicate.StagedFile) *StagedFileDelete {
	sfd.mutation.Where(ps...)
	return sfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sfd *StagedFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sfd.sqlExec, sfd.mutation, sfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sfd *StagedFileDelete) ExecX(ctx context.Context) int {
	n, err := sfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sfd *StagedFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(stagedfile.Table, sqlgraph.NewFieldSpec(stagedfile.FieldID, field.TypeInt))
	if ps := sfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sfd.mutation.done = true
	return affected, err
}

// StagedFileDeleteOne is the builder for deleting a single StagedFile entity.
type StagedFileDeleteOne struct {
	sfd *StagedFileDelete
}

// Where appends a list predicates to the StagedFileDelete builder.
func (sfdo *StagedFileDeleteOne) Where(ps ...predicate.StagedFile) *StagedFileDeleteOne {
	sfdo.sfd.mutation.Where(ps...)
	return sfdo
}

// Exec executes the deletion query.
func (sfdo *StagedFileDeleteOne) Exec(ctx context.Context) error {
	n, err := sfdo.sfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{stagedfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sfdo *StagedFileDeleteOne) ExecX(ctx context.Context) {
	if err := sfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
