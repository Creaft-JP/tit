// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/page"
	"github.com/Creaft-JP/tit/db/local/ent/section"
)

// PageCreate is the builder for creating a Page entity.
type PageCreate struct {
	config
	mutation *PageMutation
	hooks    []Hook
}

// SetPathname sets the "pathname" field.
func (pc *PageCreate) SetPathname(s string) *PageCreate {
	pc.mutation.SetPathname(s)
	return pc
}

// SetNumber sets the "number" field.
func (pc *PageCreate) SetNumber(i int) *PageCreate {
	pc.mutation.SetNumber(i)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PageCreate) SetTitle(s string) *PageCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetOverviewSentence sets the "overview_sentence" field.
func (pc *PageCreate) SetOverviewSentence(s string) *PageCreate {
	pc.mutation.SetOverviewSentence(s)
	return pc
}

// AddSectionIDs adds the "sections" edge to the Section entity by IDs.
func (pc *PageCreate) AddSectionIDs(ids ...int) *PageCreate {
	pc.mutation.AddSectionIDs(ids...)
	return pc
}

// AddSections adds the "sections" edges to the Section entity.
func (pc *PageCreate) AddSections(s ...*Section) *PageCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSectionIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (pc *PageCreate) Mutation() *PageMutation {
	return pc.mutation
}

// Save creates the Page in the database.
func (pc *PageCreate) Save(ctx context.Context) (*Page, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PageCreate) SaveX(ctx context.Context) *Page {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PageCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PageCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PageCreate) check() error {
	if _, ok := pc.mutation.Pathname(); !ok {
		return &ValidationError{Name: "pathname", err: errors.New(`ent: missing required field "Page.pathname"`)}
	}
	if v, ok := pc.mutation.Pathname(); ok {
		if err := page.PathnameValidator(v); err != nil {
			return &ValidationError{Name: "pathname", err: fmt.Errorf(`ent: validator failed for field "Page.pathname": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Page.number"`)}
	}
	if v, ok := pc.mutation.Number(); ok {
		if err := page.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Page.number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Page.title"`)}
	}
	if _, ok := pc.mutation.OverviewSentence(); !ok {
		return &ValidationError{Name: "overview_sentence", err: errors.New(`ent: missing required field "Page.overview_sentence"`)}
	}
	return nil
}

func (pc *PageCreate) sqlSave(ctx context.Context) (*Page, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PageCreate) createSpec() (*Page, *sqlgraph.CreateSpec) {
	var (
		_node = &Page{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(page.Table, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Pathname(); ok {
		_spec.SetField(page.FieldPathname, field.TypeString, value)
		_node.Pathname = value
	}
	if value, ok := pc.mutation.Number(); ok {
		_spec.SetField(page.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.OverviewSentence(); ok {
		_spec.SetField(page.FieldOverviewSentence, field.TypeString, value)
		_node.OverviewSentence = value
	}
	if nodes := pc.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.SectionsTable,
			Columns: []string{page.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PageCreateBulk is the builder for creating many Page entities in bulk.
type PageCreateBulk struct {
	config
	builders []*PageCreate
}

// Save creates the Page entities in the database.
func (pcb *PageCreateBulk) Save(ctx context.Context) ([]*Page, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Page, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PageCreateBulk) SaveX(ctx context.Context) []*Page {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PageCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
