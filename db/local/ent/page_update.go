// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/page"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPathname sets the "pathname" field.
func (pu *PageUpdate) SetPathname(s string) *PageUpdate {
	pu.mutation.SetPathname(s)
	return pu
}

// SetOrderWithinSiblings sets the "order_within_siblings" field.
func (pu *PageUpdate) SetOrderWithinSiblings(i int) *PageUpdate {
	pu.mutation.ResetOrderWithinSiblings()
	pu.mutation.SetOrderWithinSiblings(i)
	return pu
}

// AddOrderWithinSiblings adds i to the "order_within_siblings" field.
func (pu *PageUpdate) AddOrderWithinSiblings(i int) *PageUpdate {
	pu.mutation.AddOrderWithinSiblings(i)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PageUpdate) SetTitle(s string) *PageUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetOverviewSentence sets the "overview_sentence" field.
func (pu *PageUpdate) SetOverviewSentence(s string) *PageUpdate {
	pu.mutation.SetOverviewSentence(s)
	return pu
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PageUpdate) check() error {
	if v, ok := pu.mutation.Pathname(); ok {
		if err := page.PathnameValidator(v); err != nil {
			return &ValidationError{Name: "pathname", err: fmt.Errorf(`ent: validator failed for field "Page.pathname": %w`, err)}
		}
	}
	if v, ok := pu.mutation.OrderWithinSiblings(); ok {
		if err := page.OrderWithinSiblingsValidator(v); err != nil {
			return &ValidationError{Name: "order_within_siblings", err: fmt.Errorf(`ent: validator failed for field "Page.order_within_siblings": %w`, err)}
		}
	}
	return nil
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Pathname(); ok {
		_spec.SetField(page.FieldPathname, field.TypeString, value)
	}
	if value, ok := pu.mutation.OrderWithinSiblings(); ok {
		_spec.SetField(page.FieldOrderWithinSiblings, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOrderWithinSiblings(); ok {
		_spec.AddField(page.FieldOrderWithinSiblings, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.OverviewSentence(); ok {
		_spec.SetField(page.FieldOverviewSentence, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetPathname sets the "pathname" field.
func (puo *PageUpdateOne) SetPathname(s string) *PageUpdateOne {
	puo.mutation.SetPathname(s)
	return puo
}

// SetOrderWithinSiblings sets the "order_within_siblings" field.
func (puo *PageUpdateOne) SetOrderWithinSiblings(i int) *PageUpdateOne {
	puo.mutation.ResetOrderWithinSiblings()
	puo.mutation.SetOrderWithinSiblings(i)
	return puo
}

// AddOrderWithinSiblings adds i to the "order_within_siblings" field.
func (puo *PageUpdateOne) AddOrderWithinSiblings(i int) *PageUpdateOne {
	puo.mutation.AddOrderWithinSiblings(i)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PageUpdateOne) SetTitle(s string) *PageUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetOverviewSentence sets the "overview_sentence" field.
func (puo *PageUpdateOne) SetOverviewSentence(s string) *PageUpdateOne {
	puo.mutation.SetOverviewSentence(s)
	return puo
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// Where appends a list predicates to the PageUpdate builder.
func (puo *PageUpdateOne) Where(ps ...predicate.Page) *PageUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Page entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PageUpdateOne) check() error {
	if v, ok := puo.mutation.Pathname(); ok {
		if err := page.PathnameValidator(v); err != nil {
			return &ValidationError{Name: "pathname", err: fmt.Errorf(`ent: validator failed for field "Page.pathname": %w`, err)}
		}
	}
	if v, ok := puo.mutation.OrderWithinSiblings(); ok {
		if err := page.OrderWithinSiblingsValidator(v); err != nil {
			return &ValidationError{Name: "order_within_siblings", err: fmt.Errorf(`ent: validator failed for field "Page.order_within_siblings": %w`, err)}
		}
	}
	return nil
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Pathname(); ok {
		_spec.SetField(page.FieldPathname, field.TypeString, value)
	}
	if value, ok := puo.mutation.OrderWithinSiblings(); ok {
		_spec.SetField(page.FieldOrderWithinSiblings, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOrderWithinSiblings(); ok {
		_spec.AddField(page.FieldOrderWithinSiblings, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.OverviewSentence(); ok {
		_spec.SetField(page.FieldOverviewSentence, field.TypeString, value)
	}
	_node = &Page{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
