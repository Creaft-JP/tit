// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Creaft-JP/tit/db/local/ent/commit"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
)

// CommittedFile is the model entity for the CommittedFile schema.
type CommittedFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommittedFileQuery when eager-loading is set.
	Edges        CommittedFileEdges `json:"edges"`
	commit_files *int
	selectValues sql.SelectValues
}

// CommittedFileEdges holds the relations/edges for other nodes in the graph.
type CommittedFileEdges struct {
	// Commit holds the value of the commit edge.
	Commit *Commit `json:"commit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommitOrErr returns the Commit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommittedFileEdges) CommitOrErr() (*Commit, error) {
	if e.loadedTypes[0] {
		if e.Commit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: commit.Label}
		}
		return e.Commit, nil
	}
	return nil, &NotLoadedError{edge: "commit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommittedFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case committedfile.FieldID:
			values[i] = new(sql.NullInt64)
		case committedfile.FieldPath, committedfile.FieldContent:
			values[i] = new(sql.NullString)
		case committedfile.ForeignKeys[0]: // commit_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommittedFile fields.
func (cf *CommittedFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case committedfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = int(value.Int64)
		case committedfile.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				cf.Path = value.String
			}
		case committedfile.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				cf.Content = value.String
			}
		case committedfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field commit_files", value)
			} else if value.Valid {
				cf.commit_files = new(int)
				*cf.commit_files = int(value.Int64)
			}
		default:
			cf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommittedFile.
// This includes values selected through modifiers, order, etc.
func (cf *CommittedFile) Value(name string) (ent.Value, error) {
	return cf.selectValues.Get(name)
}

// QueryCommit queries the "commit" edge of the CommittedFile entity.
func (cf *CommittedFile) QueryCommit() *CommitQuery {
	return NewCommittedFileClient(cf.config).QueryCommit(cf)
}

// Update returns a builder for updating this CommittedFile.
// Note that you need to call CommittedFile.Unwrap() before calling this method if this CommittedFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CommittedFile) Update() *CommittedFileUpdateOne {
	return NewCommittedFileClient(cf.config).UpdateOne(cf)
}

// Unwrap unwraps the CommittedFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CommittedFile) Unwrap() *CommittedFile {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommittedFile is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CommittedFile) String() string {
	var builder strings.Builder
	builder.WriteString("CommittedFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("path=")
	builder.WriteString(cf.Path)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(cf.Content)
	builder.WriteByte(')')
	return builder.String()
}

// CommittedFiles is a parsable slice of CommittedFile.
type CommittedFiles []*CommittedFile
