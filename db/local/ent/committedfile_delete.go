// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
)

// CommittedFileDelete is the builder for deleting a CommittedFile entity.
type CommittedFileDelete struct {
	config
	hooks    []Hook
	mutation *CommittedFileMutation
}

// Where appends a list predicates to the CommittedFileDelete builder.
func (cfd *CommittedFileDelete) Where(ps ...predicate.CommittedFile) *CommittedFileDelete {
	cfd.mutation.Where(ps...)
	return cfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cfd *CommittedFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cfd.sqlExec, cfd.mutation, cfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cfd *CommittedFileDelete) ExecX(ctx context.Context) int {
	n, err := cfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cfd *CommittedFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(committedfile.Table, sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt))
	if ps := cfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cfd.mutation.done = true
	return affected, err
}

// CommittedFileDeleteOne is the builder for deleting a single CommittedFile entity.
type CommittedFileDeleteOne struct {
	cfd *CommittedFileDelete
}

// Where appends a list predicates to the CommittedFileDelete builder.
func (cfdo *CommittedFileDeleteOne) Where(ps ...predicate.CommittedFile) *CommittedFileDeleteOne {
	cfdo.cfd.mutation.Where(ps...)
	return cfdo
}

// Exec executes the deletion query.
func (cfdo *CommittedFileDeleteOne) Exec(ctx context.Context) error {
	n, err := cfdo.cfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{committedfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cfdo *CommittedFileDeleteOne) ExecX(ctx context.Context) {
	if err := cfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
