// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
	"github.com/Creaft-JP/tit/db/local/ent/stagedfile"
)

// StagedFileUpdate is the builder for updating StagedFile entities.
type StagedFileUpdate struct {
	config
	hooks    []Hook
	mutation *StagedFileMutation
}

// Where appends a list predicates to the StagedFileUpdate builder.
func (sfu *StagedFileUpdate) Where(ps ...predicate.StagedFile) *StagedFileUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetPath sets the "path" field.
func (sfu *StagedFileUpdate) SetPath(s string) *StagedFileUpdate {
	sfu.mutation.SetPath(s)
	return sfu
}

// SetContent sets the "content" field.
func (sfu *StagedFileUpdate) SetContent(s string) *StagedFileUpdate {
	sfu.mutation.SetContent(s)
	return sfu
}

// Mutation returns the StagedFileMutation object of the builder.
func (sfu *StagedFileUpdate) Mutation() *StagedFileMutation {
	return sfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *StagedFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *StagedFileUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *StagedFileUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *StagedFileUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfu *StagedFileUpdate) check() error {
	if v, ok := sfu.mutation.Path(); ok {
		if err := stagedfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "StagedFile.path": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.Content(); ok {
		if err := stagedfile.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "StagedFile.content": %w`, err)}
		}
	}
	return nil
}

func (sfu *StagedFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stagedfile.Table, stagedfile.Columns, sqlgraph.NewFieldSpec(stagedfile.FieldID, field.TypeInt))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.Path(); ok {
		_spec.SetField(stagedfile.FieldPath, field.TypeString, value)
	}
	if value, ok := sfu.mutation.Content(); ok {
		_spec.SetField(stagedfile.FieldContent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stagedfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// StagedFileUpdateOne is the builder for updating a single StagedFile entity.
type StagedFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StagedFileMutation
}

// SetPath sets the "path" field.
func (sfuo *StagedFileUpdateOne) SetPath(s string) *StagedFileUpdateOne {
	sfuo.mutation.SetPath(s)
	return sfuo
}

// SetContent sets the "content" field.
func (sfuo *StagedFileUpdateOne) SetContent(s string) *StagedFileUpdateOne {
	sfuo.mutation.SetContent(s)
	return sfuo
}

// Mutation returns the StagedFileMutation object of the builder.
func (sfuo *StagedFileUpdateOne) Mutation() *StagedFileMutation {
	return sfuo.mutation
}

// Where appends a list predicates to the StagedFileUpdate builder.
func (sfuo *StagedFileUpdateOne) Where(ps ...predicate.StagedFile) *StagedFileUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *StagedFileUpdateOne) Select(field string, fields ...string) *StagedFileUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated StagedFile entity.
func (sfuo *StagedFileUpdateOne) Save(ctx context.Context) (*StagedFile, error) {
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *StagedFileUpdateOne) SaveX(ctx context.Context) *StagedFile {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *StagedFileUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *StagedFileUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfuo *StagedFileUpdateOne) check() error {
	if v, ok := sfuo.mutation.Path(); ok {
		if err := stagedfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "StagedFile.path": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.Content(); ok {
		if err := stagedfile.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "StagedFile.content": %w`, err)}
		}
	}
	return nil
}

func (sfuo *StagedFileUpdateOne) sqlSave(ctx context.Context) (_node *StagedFile, err error) {
	if err := sfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stagedfile.Table, stagedfile.Columns, sqlgraph.NewFieldSpec(stagedfile.FieldID, field.TypeInt))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StagedFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stagedfile.FieldID)
		for _, f := range fields {
			if !stagedfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stagedfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.Path(); ok {
		_spec.SetField(stagedfile.FieldPath, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.Content(); ok {
		_spec.SetField(stagedfile.FieldContent, field.TypeString, value)
	}
	_node = &StagedFile{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stagedfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
