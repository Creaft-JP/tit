// Code generated by ent, DO NOT EDIT.

package committedfile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the committedfile type in the database.
	Label = "committed_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeCommit holds the string denoting the commit edge name in mutations.
	EdgeCommit = "commit"
	// Table holds the table name of the committedfile in the database.
	Table = "committed_files"
	// CommitTable is the table that holds the commit relation/edge.
	CommitTable = "committed_files"
	// CommitInverseTable is the table name for the Commit entity.
	// It exists in this package in order to avoid circular dependency with the "commit" package.
	CommitInverseTable = "commits"
	// CommitColumn is the table column denoting the commit relation/edge.
	CommitColumn = "commit_files"
)

// Columns holds all SQL columns for committedfile fields.
var Columns = []string{
	FieldID,
	FieldPath,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "committed_files"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"commit_files",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
)

// OrderOption defines the ordering options for the CommittedFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCommitField orders the results by commit field.
func ByCommitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommitStep(), sql.OrderByField(field, opts...))
	}
}
func newCommitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommitTable, CommitColumn),
	)
}
