// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/commit"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
)

// CommittedFileCreate is the builder for creating a CommittedFile entity.
type CommittedFileCreate struct {
	config
	mutation *CommittedFileMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (cfc *CommittedFileCreate) SetPath(s string) *CommittedFileCreate {
	cfc.mutation.SetPath(s)
	return cfc
}

// SetContent sets the "content" field.
func (cfc *CommittedFileCreate) SetContent(s string) *CommittedFileCreate {
	cfc.mutation.SetContent(s)
	return cfc
}

// SetCommitID sets the "commit" edge to the Commit entity by ID.
func (cfc *CommittedFileCreate) SetCommitID(id int) *CommittedFileCreate {
	cfc.mutation.SetCommitID(id)
	return cfc
}

// SetNillableCommitID sets the "commit" edge to the Commit entity by ID if the given value is not nil.
func (cfc *CommittedFileCreate) SetNillableCommitID(id *int) *CommittedFileCreate {
	if id != nil {
		cfc = cfc.SetCommitID(*id)
	}
	return cfc
}

// SetCommit sets the "commit" edge to the Commit entity.
func (cfc *CommittedFileCreate) SetCommit(c *Commit) *CommittedFileCreate {
	return cfc.SetCommitID(c.ID)
}

// Mutation returns the CommittedFileMutation object of the builder.
func (cfc *CommittedFileCreate) Mutation() *CommittedFileMutation {
	return cfc.mutation
}

// Save creates the CommittedFile in the database.
func (cfc *CommittedFileCreate) Save(ctx context.Context) (*CommittedFile, error) {
	return withHooks(ctx, cfc.sqlSave, cfc.mutation, cfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CommittedFileCreate) SaveX(ctx context.Context) *CommittedFile {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CommittedFileCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CommittedFileCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CommittedFileCreate) check() error {
	if _, ok := cfc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "CommittedFile.path"`)}
	}
	if v, ok := cfc.mutation.Path(); ok {
		if err := committedfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "CommittedFile.path": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "CommittedFile.content"`)}
	}
	return nil
}

func (cfc *CommittedFileCreate) sqlSave(ctx context.Context) (*CommittedFile, error) {
	if err := cfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cfc.mutation.id = &_node.ID
	cfc.mutation.done = true
	return _node, nil
}

func (cfc *CommittedFileCreate) createSpec() (*CommittedFile, *sqlgraph.CreateSpec) {
	var (
		_node = &CommittedFile{config: cfc.config}
		_spec = sqlgraph.NewCreateSpec(committedfile.Table, sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt))
	)
	if value, ok := cfc.mutation.Path(); ok {
		_spec.SetField(committedfile.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := cfc.mutation.Content(); ok {
		_spec.SetField(committedfile.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if nodes := cfc.mutation.CommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   committedfile.CommitTable,
			Columns: []string{committedfile.CommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.commit_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommittedFileCreateBulk is the builder for creating many CommittedFile entities in bulk.
type CommittedFileCreateBulk struct {
	config
	builders []*CommittedFileCreate
}

// Save creates the CommittedFile entities in the database.
func (cfcb *CommittedFileCreateBulk) Save(ctx context.Context) ([]*CommittedFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CommittedFile, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommittedFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CommittedFileCreateBulk) SaveX(ctx context.Context) []*CommittedFile {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CommittedFileCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CommittedFileCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
