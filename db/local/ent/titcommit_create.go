// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
	"github.com/Creaft-JP/tit/db/local/ent/section"
	"github.com/Creaft-JP/tit/db/local/ent/titcommit"
)

// TitCommitCreate is the builder for creating a TitCommit entity.
type TitCommitCreate struct {
	config
	mutation *TitCommitMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (tcc *TitCommitCreate) SetNumber(i int) *TitCommitCreate {
	tcc.mutation.SetNumber(i)
	return tcc
}

// SetMessage sets the "message" field.
func (tcc *TitCommitCreate) SetMessage(s string) *TitCommitCreate {
	tcc.mutation.SetMessage(s)
	return tcc
}

// SetSectionID sets the "section" edge to the Section entity by ID.
func (tcc *TitCommitCreate) SetSectionID(id int) *TitCommitCreate {
	tcc.mutation.SetSectionID(id)
	return tcc
}

// SetNillableSectionID sets the "section" edge to the Section entity by ID if the given value is not nil.
func (tcc *TitCommitCreate) SetNillableSectionID(id *int) *TitCommitCreate {
	if id != nil {
		tcc = tcc.SetSectionID(*id)
	}
	return tcc
}

// SetSection sets the "section" edge to the Section entity.
func (tcc *TitCommitCreate) SetSection(s *Section) *TitCommitCreate {
	return tcc.SetSectionID(s.ID)
}

// AddFileIDs adds the "files" edge to the CommittedFile entity by IDs.
func (tcc *TitCommitCreate) AddFileIDs(ids ...int) *TitCommitCreate {
	tcc.mutation.AddFileIDs(ids...)
	return tcc
}

// AddFiles adds the "files" edges to the CommittedFile entity.
func (tcc *TitCommitCreate) AddFiles(c ...*CommittedFile) *TitCommitCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tcc.AddFileIDs(ids...)
}

// Mutation returns the TitCommitMutation object of the builder.
func (tcc *TitCommitCreate) Mutation() *TitCommitMutation {
	return tcc.mutation
}

// Save creates the TitCommit in the database.
func (tcc *TitCommitCreate) Save(ctx context.Context) (*TitCommit, error) {
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TitCommitCreate) SaveX(ctx context.Context) *TitCommit {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TitCommitCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TitCommitCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TitCommitCreate) check() error {
	if _, ok := tcc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "TitCommit.number"`)}
	}
	if v, ok := tcc.mutation.Number(); ok {
		if err := titcommit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "TitCommit.number": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "TitCommit.message"`)}
	}
	if v, ok := tcc.mutation.Message(); ok {
		if err := titcommit.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "TitCommit.message": %w`, err)}
		}
	}
	return nil
}

func (tcc *TitCommitCreate) sqlSave(ctx context.Context) (*TitCommit, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TitCommitCreate) createSpec() (*TitCommit, *sqlgraph.CreateSpec) {
	var (
		_node = &TitCommit{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(titcommit.Table, sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt))
	)
	if value, ok := tcc.mutation.Number(); ok {
		_spec.SetField(titcommit.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := tcc.mutation.Message(); ok {
		_spec.SetField(titcommit.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if nodes := tcc.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   titcommit.SectionTable,
			Columns: []string{titcommit.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.section_commits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TitCommitCreateBulk is the builder for creating many TitCommit entities in bulk.
type TitCommitCreateBulk struct {
	config
	builders []*TitCommitCreate
}

// Save creates the TitCommit entities in the database.
func (tccb *TitCommitCreateBulk) Save(ctx context.Context) ([]*TitCommit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TitCommit, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TitCommitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TitCommitCreateBulk) SaveX(ctx context.Context) []*TitCommit {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TitCommitCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TitCommitCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
