// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/page"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
	"github.com/Creaft-JP/tit/db/local/ent/section"
	"github.com/Creaft-JP/tit/db/local/ent/titcommit"
)

// SectionUpdate is the builder for updating Section entities.
type SectionUpdate struct {
	config
	hooks    []Hook
	mutation *SectionMutation
}

// Where appends a list predicates to the SectionUpdate builder.
func (su *SectionUpdate) Where(ps ...predicate.Section) *SectionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSlug sets the "slug" field.
func (su *SectionUpdate) SetSlug(s string) *SectionUpdate {
	su.mutation.SetSlug(s)
	return su
}

// SetTitle sets the "title" field.
func (su *SectionUpdate) SetTitle(s string) *SectionUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetOverviewSentence sets the "overview_sentence" field.
func (su *SectionUpdate) SetOverviewSentence(s string) *SectionUpdate {
	su.mutation.SetOverviewSentence(s)
	return su
}

// SetNumber sets the "number" field.
func (su *SectionUpdate) SetNumber(i int) *SectionUpdate {
	su.mutation.ResetNumber()
	su.mutation.SetNumber(i)
	return su
}

// AddNumber adds i to the "number" field.
func (su *SectionUpdate) AddNumber(i int) *SectionUpdate {
	su.mutation.AddNumber(i)
	return su
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (su *SectionUpdate) SetPageID(id int) *SectionUpdate {
	su.mutation.SetPageID(id)
	return su
}

// SetNillablePageID sets the "page" edge to the Page entity by ID if the given value is not nil.
func (su *SectionUpdate) SetNillablePageID(id *int) *SectionUpdate {
	if id != nil {
		su = su.SetPageID(*id)
	}
	return su
}

// SetPage sets the "page" edge to the Page entity.
func (su *SectionUpdate) SetPage(p *Page) *SectionUpdate {
	return su.SetPageID(p.ID)
}

// AddCommitIDs adds the "commits" edge to the TitCommit entity by IDs.
func (su *SectionUpdate) AddCommitIDs(ids ...int) *SectionUpdate {
	su.mutation.AddCommitIDs(ids...)
	return su
}

// AddCommits adds the "commits" edges to the TitCommit entity.
func (su *SectionUpdate) AddCommits(t ...*TitCommit) *SectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddCommitIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (su *SectionUpdate) Mutation() *SectionMutation {
	return su.mutation
}

// ClearPage clears the "page" edge to the Page entity.
func (su *SectionUpdate) ClearPage() *SectionUpdate {
	su.mutation.ClearPage()
	return su
}

// ClearCommits clears all "commits" edges to the TitCommit entity.
func (su *SectionUpdate) ClearCommits() *SectionUpdate {
	su.mutation.ClearCommits()
	return su
}

// RemoveCommitIDs removes the "commits" edge to TitCommit entities by IDs.
func (su *SectionUpdate) RemoveCommitIDs(ids ...int) *SectionUpdate {
	su.mutation.RemoveCommitIDs(ids...)
	return su
}

// RemoveCommits removes "commits" edges to TitCommit entities.
func (su *SectionUpdate) RemoveCommits(t ...*TitCommit) *SectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveCommitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SectionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SectionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SectionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SectionUpdate) check() error {
	if v, ok := su.mutation.Slug(); ok {
		if err := section.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Section.slug": %w`, err)}
		}
	}
	if v, ok := su.mutation.Title(); ok {
		if err := section.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Section.title": %w`, err)}
		}
	}
	if v, ok := su.mutation.Number(); ok {
		if err := section.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Section.number": %w`, err)}
		}
	}
	return nil
}

func (su *SectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(section.Table, section.Columns, sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Slug(); ok {
		_spec.SetField(section.FieldSlug, field.TypeString, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(section.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.OverviewSentence(); ok {
		_spec.SetField(section.FieldOverviewSentence, field.TypeString, value)
	}
	if value, ok := su.mutation.Number(); ok {
		_spec.SetField(section.FieldNumber, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedNumber(); ok {
		_spec.AddField(section.FieldNumber, field.TypeInt, value)
	}
	if su.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.PageTable,
			Columns: []string{section.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.PageTable,
			Columns: []string{section.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.CommitsTable,
			Columns: []string{section.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCommitsIDs(); len(nodes) > 0 && !su.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.CommitsTable,
			Columns: []string{section.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.CommitsTable,
			Columns: []string{section.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SectionUpdateOne is the builder for updating a single Section entity.
type SectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SectionMutation
}

// SetSlug sets the "slug" field.
func (suo *SectionUpdateOne) SetSlug(s string) *SectionUpdateOne {
	suo.mutation.SetSlug(s)
	return suo
}

// SetTitle sets the "title" field.
func (suo *SectionUpdateOne) SetTitle(s string) *SectionUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetOverviewSentence sets the "overview_sentence" field.
func (suo *SectionUpdateOne) SetOverviewSentence(s string) *SectionUpdateOne {
	suo.mutation.SetOverviewSentence(s)
	return suo
}

// SetNumber sets the "number" field.
func (suo *SectionUpdateOne) SetNumber(i int) *SectionUpdateOne {
	suo.mutation.ResetNumber()
	suo.mutation.SetNumber(i)
	return suo
}

// AddNumber adds i to the "number" field.
func (suo *SectionUpdateOne) AddNumber(i int) *SectionUpdateOne {
	suo.mutation.AddNumber(i)
	return suo
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (suo *SectionUpdateOne) SetPageID(id int) *SectionUpdateOne {
	suo.mutation.SetPageID(id)
	return suo
}

// SetNillablePageID sets the "page" edge to the Page entity by ID if the given value is not nil.
func (suo *SectionUpdateOne) SetNillablePageID(id *int) *SectionUpdateOne {
	if id != nil {
		suo = suo.SetPageID(*id)
	}
	return suo
}

// SetPage sets the "page" edge to the Page entity.
func (suo *SectionUpdateOne) SetPage(p *Page) *SectionUpdateOne {
	return suo.SetPageID(p.ID)
}

// AddCommitIDs adds the "commits" edge to the TitCommit entity by IDs.
func (suo *SectionUpdateOne) AddCommitIDs(ids ...int) *SectionUpdateOne {
	suo.mutation.AddCommitIDs(ids...)
	return suo
}

// AddCommits adds the "commits" edges to the TitCommit entity.
func (suo *SectionUpdateOne) AddCommits(t ...*TitCommit) *SectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddCommitIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (suo *SectionUpdateOne) Mutation() *SectionMutation {
	return suo.mutation
}

// ClearPage clears the "page" edge to the Page entity.
func (suo *SectionUpdateOne) ClearPage() *SectionUpdateOne {
	suo.mutation.ClearPage()
	return suo
}

// ClearCommits clears all "commits" edges to the TitCommit entity.
func (suo *SectionUpdateOne) ClearCommits() *SectionUpdateOne {
	suo.mutation.ClearCommits()
	return suo
}

// RemoveCommitIDs removes the "commits" edge to TitCommit entities by IDs.
func (suo *SectionUpdateOne) RemoveCommitIDs(ids ...int) *SectionUpdateOne {
	suo.mutation.RemoveCommitIDs(ids...)
	return suo
}

// RemoveCommits removes "commits" edges to TitCommit entities.
func (suo *SectionUpdateOne) RemoveCommits(t ...*TitCommit) *SectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveCommitIDs(ids...)
}

// Where appends a list predicates to the SectionUpdate builder.
func (suo *SectionUpdateOne) Where(ps ...predicate.Section) *SectionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SectionUpdateOne) Select(field string, fields ...string) *SectionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Section entity.
func (suo *SectionUpdateOne) Save(ctx context.Context) (*Section, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SectionUpdateOne) SaveX(ctx context.Context) *Section {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SectionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SectionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SectionUpdateOne) check() error {
	if v, ok := suo.mutation.Slug(); ok {
		if err := section.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Section.slug": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Title(); ok {
		if err := section.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Section.title": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Number(); ok {
		if err := section.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Section.number": %w`, err)}
		}
	}
	return nil
}

func (suo *SectionUpdateOne) sqlSave(ctx context.Context) (_node *Section, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(section.Table, section.Columns, sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Section.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, section.FieldID)
		for _, f := range fields {
			if !section.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != section.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Slug(); ok {
		_spec.SetField(section.FieldSlug, field.TypeString, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(section.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.OverviewSentence(); ok {
		_spec.SetField(section.FieldOverviewSentence, field.TypeString, value)
	}
	if value, ok := suo.mutation.Number(); ok {
		_spec.SetField(section.FieldNumber, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedNumber(); ok {
		_spec.AddField(section.FieldNumber, field.TypeInt, value)
	}
	if suo.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.PageTable,
			Columns: []string{section.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.PageTable,
			Columns: []string{section.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.CommitsTable,
			Columns: []string{section.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCommitsIDs(); len(nodes) > 0 && !suo.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.CommitsTable,
			Columns: []string{section.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.CommitsTable,
			Columns: []string{section.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Section{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
