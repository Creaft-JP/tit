// Code generated by ent, DO NOT EDIT.

package section

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldSlug, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldTitle, v))
}

// OverviewSentence applies equality check predicate on the "overview_sentence" field. It's identical to OverviewSentenceEQ.
func OverviewSentence(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldOverviewSentence, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldNumber, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Section {
	return predicate.Section(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Section {
	return predicate.Section(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Section {
	return predicate.Section(sql.FieldContainsFold(FieldSlug, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Section {
	return predicate.Section(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Section {
	return predicate.Section(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Section {
	return predicate.Section(sql.FieldContainsFold(FieldTitle, v))
}

// OverviewSentenceEQ applies the EQ predicate on the "overview_sentence" field.
func OverviewSentenceEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldOverviewSentence, v))
}

// OverviewSentenceNEQ applies the NEQ predicate on the "overview_sentence" field.
func OverviewSentenceNEQ(v string) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldOverviewSentence, v))
}

// OverviewSentenceIn applies the In predicate on the "overview_sentence" field.
func OverviewSentenceIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldOverviewSentence, vs...))
}

// OverviewSentenceNotIn applies the NotIn predicate on the "overview_sentence" field.
func OverviewSentenceNotIn(vs ...string) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldOverviewSentence, vs...))
}

// OverviewSentenceGT applies the GT predicate on the "overview_sentence" field.
func OverviewSentenceGT(v string) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldOverviewSentence, v))
}

// OverviewSentenceGTE applies the GTE predicate on the "overview_sentence" field.
func OverviewSentenceGTE(v string) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldOverviewSentence, v))
}

// OverviewSentenceLT applies the LT predicate on the "overview_sentence" field.
func OverviewSentenceLT(v string) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldOverviewSentence, v))
}

// OverviewSentenceLTE applies the LTE predicate on the "overview_sentence" field.
func OverviewSentenceLTE(v string) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldOverviewSentence, v))
}

// OverviewSentenceContains applies the Contains predicate on the "overview_sentence" field.
func OverviewSentenceContains(v string) predicate.Section {
	return predicate.Section(sql.FieldContains(FieldOverviewSentence, v))
}

// OverviewSentenceHasPrefix applies the HasPrefix predicate on the "overview_sentence" field.
func OverviewSentenceHasPrefix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasPrefix(FieldOverviewSentence, v))
}

// OverviewSentenceHasSuffix applies the HasSuffix predicate on the "overview_sentence" field.
func OverviewSentenceHasSuffix(v string) predicate.Section {
	return predicate.Section(sql.FieldHasSuffix(FieldOverviewSentence, v))
}

// OverviewSentenceEqualFold applies the EqualFold predicate on the "overview_sentence" field.
func OverviewSentenceEqualFold(v string) predicate.Section {
	return predicate.Section(sql.FieldEqualFold(FieldOverviewSentence, v))
}

// OverviewSentenceContainsFold applies the ContainsFold predicate on the "overview_sentence" field.
func OverviewSentenceContainsFold(v string) predicate.Section {
	return predicate.Section(sql.FieldContainsFold(FieldOverviewSentence, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Section {
	return predicate.Section(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Section {
	return predicate.Section(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Section {
	return predicate.Section(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Section {
	return predicate.Section(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Section {
	return predicate.Section(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Section {
	return predicate.Section(sql.FieldLTE(FieldNumber, v))
}

// HasPage applies the HasEdge predicate on the "page" edge.
func HasPage() predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PageTable, PageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPageWith applies the HasEdge predicate on the "page" edge with a given conditions (other predicates).
func HasPageWith(preds ...predicate.Page) predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		step := newPageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Section) predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Section) predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Section) predicate.Section {
	return predicate.Section(func(s *sql.Selector) {
		p(s.Not())
	})
}
