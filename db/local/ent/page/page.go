// Code generated by ent, DO NOT EDIT.

package page

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the page type in the database.
	Label = "page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPathname holds the string denoting the pathname field in the database.
	FieldPathname = "pathname"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldOverviewSentence holds the string denoting the overview_sentence field in the database.
	FieldOverviewSentence = "overview_sentence"
	// EdgeSections holds the string denoting the sections edge name in mutations.
	EdgeSections = "sections"
	// Table holds the table name of the page in the database.
	Table = "pages"
	// SectionsTable is the table that holds the sections relation/edge.
	SectionsTable = "sections"
	// SectionsInverseTable is the table name for the Section entity.
	// It exists in this package in order to avoid circular dependency with the "section" package.
	SectionsInverseTable = "sections"
	// SectionsColumn is the table column denoting the sections relation/edge.
	SectionsColumn = "page_sections"
)

// Columns holds all SQL columns for page fields.
var Columns = []string{
	FieldID,
	FieldPathname,
	FieldNumber,
	FieldTitle,
	FieldOverviewSentence,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PathnameValidator is a validator for the "pathname" field. It is called by the builders before save.
	PathnameValidator func(string) error
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(int) error
)

// OrderOption defines the ordering options for the Page queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPathname orders the results by the pathname field.
func ByPathname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPathname, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByOverviewSentence orders the results by the overview_sentence field.
func ByOverviewSentence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverviewSentence, opts...).ToFunc()
}

// BySectionsCount orders the results by sections count.
func BySectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSectionsStep(), opts...)
	}
}

// BySections orders the results by sections terms.
func BySections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SectionsTable, SectionsColumn),
	)
}
