// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
	"github.com/Creaft-JP/tit/db/local/ent/image"
	"github.com/Creaft-JP/tit/db/local/ent/page"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
	"github.com/Creaft-JP/tit/db/local/ent/remote"
	"github.com/Creaft-JP/tit/db/local/ent/section"
	"github.com/Creaft-JP/tit/db/local/ent/stagedfile"
	"github.com/Creaft-JP/tit/db/local/ent/titcommit"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCommittedFile = "CommittedFile"
	TypeImage         = "Image"
	TypePage          = "Page"
	TypeRemote        = "Remote"
	TypeSection       = "Section"
	TypeStagedFile    = "StagedFile"
	TypeTitCommit     = "TitCommit"
)

// CommittedFileMutation represents an operation that mutates the CommittedFile nodes in the graph.
type CommittedFileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_path         *string
	content       *string
	clearedFields map[string]struct{}
	commit        *int
	clearedcommit bool
	done          bool
	oldValue      func(context.Context) (*CommittedFile, error)
	predicates    []predicate.CommittedFile
}

var _ ent.Mutation = (*CommittedFileMutation)(nil)

// committedfileOption allows management of the mutation configuration using functional options.
type committedfileOption func(*CommittedFileMutation)

// newCommittedFileMutation creates new mutation for the CommittedFile entity.
func newCommittedFileMutation(c config, op Op, opts ...committedfileOption) *CommittedFileMutation {
	m := &CommittedFileMutation{
		config:        c,
		op:            op,
		typ:           TypeCommittedFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommittedFileID sets the ID field of the mutation.
func withCommittedFileID(id int) committedfileOption {
	return func(m *CommittedFileMutation) {
		var (
			err   error
			once  sync.Once
			value *CommittedFile
		)
		m.oldValue = func(ctx context.Context) (*CommittedFile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommittedFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommittedFile sets the old CommittedFile of the mutation.
func withCommittedFile(node *CommittedFile) committedfileOption {
	return func(m *CommittedFileMutation) {
		m.oldValue = func(context.Context) (*CommittedFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommittedFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommittedFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommittedFileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommittedFileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommittedFile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPath sets the "path" field.
func (m *CommittedFileMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *CommittedFileMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the CommittedFile entity.
// If the CommittedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommittedFileMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *CommittedFileMutation) ResetPath() {
	m._path = nil
}

// SetContent sets the "content" field.
func (m *CommittedFileMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CommittedFileMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the CommittedFile entity.
// If the CommittedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommittedFileMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *CommittedFileMutation) ResetContent() {
	m.content = nil
}

// SetCommitID sets the "commit" edge to the TitCommit entity by id.
func (m *CommittedFileMutation) SetCommitID(id int) {
	m.commit = &id
}

// ClearCommit clears the "commit" edge to the TitCommit entity.
func (m *CommittedFileMutation) ClearCommit() {
	m.clearedcommit = true
}

// CommitCleared reports if the "commit" edge to the TitCommit entity was cleared.
func (m *CommittedFileMutation) CommitCleared() bool {
	return m.clearedcommit
}

// CommitID returns the "commit" edge ID in the mutation.
func (m *CommittedFileMutation) CommitID() (id int, exists bool) {
	if m.commit != nil {
		return *m.commit, true
	}
	return
}

// CommitIDs returns the "commit" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommitID instead. It exists only for internal usage by the builders.
func (m *CommittedFileMutation) CommitIDs() (ids []int) {
	if id := m.commit; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCommit resets all changes to the "commit" edge.
func (m *CommittedFileMutation) ResetCommit() {
	m.commit = nil
	m.clearedcommit = false
}

// Where appends a list predicates to the CommittedFileMutation builder.
func (m *CommittedFileMutation) Where(ps ...predicate.CommittedFile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommittedFileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommittedFileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CommittedFile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommittedFileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommittedFileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CommittedFile).
func (m *CommittedFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommittedFileMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._path != nil {
		fields = append(fields, committedfile.FieldPath)
	}
	if m.content != nil {
		fields = append(fields, committedfile.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommittedFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case committedfile.FieldPath:
		return m.Path()
	case committedfile.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommittedFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case committedfile.FieldPath:
		return m.OldPath(ctx)
	case committedfile.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown CommittedFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommittedFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case committedfile.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case committedfile.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown CommittedFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommittedFileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommittedFileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommittedFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CommittedFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommittedFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommittedFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommittedFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CommittedFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommittedFileMutation) ResetField(name string) error {
	switch name {
	case committedfile.FieldPath:
		m.ResetPath()
		return nil
	case committedfile.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown CommittedFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommittedFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.commit != nil {
		edges = append(edges, committedfile.EdgeCommit)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommittedFileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case committedfile.EdgeCommit:
		if id := m.commit; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommittedFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommittedFileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommittedFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcommit {
		edges = append(edges, committedfile.EdgeCommit)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommittedFileMutation) EdgeCleared(name string) bool {
	switch name {
	case committedfile.EdgeCommit:
		return m.clearedcommit
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommittedFileMutation) ClearEdge(name string) error {
	switch name {
	case committedfile.EdgeCommit:
		m.ClearCommit()
		return nil
	}
	return fmt.Errorf("unknown CommittedFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommittedFileMutation) ResetEdge(name string) error {
	switch name {
	case committedfile.EdgeCommit:
		m.ResetCommit()
		return nil
	}
	return fmt.Errorf("unknown CommittedFile edge %s", name)
}

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	extension     *string
	contents      *[]byte
	number        *int
	addnumber     *int
	description   *string
	clearedFields map[string]struct{}
	commit        map[int]struct{}
	removedcommit map[int]struct{}
	clearedcommit bool
	done          bool
	oldValue      func(context.Context) (*Image, error)
	predicates    []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uuid.UUID) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExtension sets the "extension" field.
func (m *ImageMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *ImageMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ResetExtension resets all changes to the "extension" field.
func (m *ImageMutation) ResetExtension() {
	m.extension = nil
}

// SetContents sets the "contents" field.
func (m *ImageMutation) SetContents(b []byte) {
	m.contents = &b
}

// Contents returns the value of the "contents" field in the mutation.
func (m *ImageMutation) Contents() (r []byte, exists bool) {
	v := m.contents
	if v == nil {
		return
	}
	return *v, true
}

// OldContents returns the old "contents" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldContents(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContents is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContents requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContents: %w", err)
	}
	return oldValue.Contents, nil
}

// ResetContents resets all changes to the "contents" field.
func (m *ImageMutation) ResetContents() {
	m.contents = nil
}

// SetNumber sets the "number" field.
func (m *ImageMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *ImageMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *ImageMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *ImageMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *ImageMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetDescription sets the "description" field.
func (m *ImageMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ImageMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ImageMutation) ResetDescription() {
	m.description = nil
}

// AddCommitIDs adds the "commit" edge to the TitCommit entity by ids.
func (m *ImageMutation) AddCommitIDs(ids ...int) {
	if m.commit == nil {
		m.commit = make(map[int]struct{})
	}
	for i := range ids {
		m.commit[ids[i]] = struct{}{}
	}
}

// ClearCommit clears the "commit" edge to the TitCommit entity.
func (m *ImageMutation) ClearCommit() {
	m.clearedcommit = true
}

// CommitCleared reports if the "commit" edge to the TitCommit entity was cleared.
func (m *ImageMutation) CommitCleared() bool {
	return m.clearedcommit
}

// RemoveCommitIDs removes the "commit" edge to the TitCommit entity by IDs.
func (m *ImageMutation) RemoveCommitIDs(ids ...int) {
	if m.removedcommit == nil {
		m.removedcommit = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.commit, ids[i])
		m.removedcommit[ids[i]] = struct{}{}
	}
}

// RemovedCommit returns the removed IDs of the "commit" edge to the TitCommit entity.
func (m *ImageMutation) RemovedCommitIDs() (ids []int) {
	for id := range m.removedcommit {
		ids = append(ids, id)
	}
	return
}

// CommitIDs returns the "commit" edge IDs in the mutation.
func (m *ImageMutation) CommitIDs() (ids []int) {
	for id := range m.commit {
		ids = append(ids, id)
	}
	return
}

// ResetCommit resets all changes to the "commit" edge.
func (m *ImageMutation) ResetCommit() {
	m.commit = nil
	m.clearedcommit = false
	m.removedcommit = nil
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.extension != nil {
		fields = append(fields, image.FieldExtension)
	}
	if m.contents != nil {
		fields = append(fields, image.FieldContents)
	}
	if m.number != nil {
		fields = append(fields, image.FieldNumber)
	}
	if m.description != nil {
		fields = append(fields, image.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldExtension:
		return m.Extension()
	case image.FieldContents:
		return m.Contents()
	case image.FieldNumber:
		return m.Number()
	case image.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldExtension:
		return m.OldExtension(ctx)
	case image.FieldContents:
		return m.OldContents(ctx)
	case image.FieldNumber:
		return m.OldNumber(ctx)
	case image.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	case image.FieldContents:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContents(v)
		return nil
	case image.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case image.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, image.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case image.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case image.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldExtension:
		m.ResetExtension()
		return nil
	case image.FieldContents:
		m.ResetContents()
		return nil
	case image.FieldNumber:
		m.ResetNumber()
		return nil
	case image.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.commit != nil {
		edges = append(edges, image.EdgeCommit)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeCommit:
		ids := make([]ent.Value, 0, len(m.commit))
		for id := range m.commit {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcommit != nil {
		edges = append(edges, image.EdgeCommit)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeCommit:
		ids := make([]ent.Value, 0, len(m.removedcommit))
		for id := range m.removedcommit {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcommit {
		edges = append(edges, image.EdgeCommit)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case image.EdgeCommit:
		return m.clearedcommit
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	switch name {
	case image.EdgeCommit:
		m.ResetCommit()
		return nil
	}
	return fmt.Errorf("unknown Image edge %s", name)
}

// PageMutation represents an operation that mutates the Page nodes in the graph.
type PageMutation struct {
	config
	op                Op
	typ               string
	id                *int
	pathname          *string
	number            *int
	addnumber         *int
	title             *string
	overview_sentence *string
	clearedFields     map[string]struct{}
	sections          map[int]struct{}
	removedsections   map[int]struct{}
	clearedsections   bool
	done              bool
	oldValue          func(context.Context) (*Page, error)
	predicates        []predicate.Page
}

var _ ent.Mutation = (*PageMutation)(nil)

// pageOption allows management of the mutation configuration using functional options.
type pageOption func(*PageMutation)

// newPageMutation creates new mutation for the Page entity.
func newPageMutation(c config, op Op, opts ...pageOption) *PageMutation {
	m := &PageMutation{
		config:        c,
		op:            op,
		typ:           TypePage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPageID sets the ID field of the mutation.
func withPageID(id int) pageOption {
	return func(m *PageMutation) {
		var (
			err   error
			once  sync.Once
			value *Page
		)
		m.oldValue = func(ctx context.Context) (*Page, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Page.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPage sets the old Page of the mutation.
func withPage(node *Page) pageOption {
	return func(m *PageMutation) {
		m.oldValue = func(context.Context) (*Page, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Page.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPathname sets the "pathname" field.
func (m *PageMutation) SetPathname(s string) {
	m.pathname = &s
}

// Pathname returns the value of the "pathname" field in the mutation.
func (m *PageMutation) Pathname() (r string, exists bool) {
	v := m.pathname
	if v == nil {
		return
	}
	return *v, true
}

// OldPathname returns the old "pathname" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldPathname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPathname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPathname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPathname: %w", err)
	}
	return oldValue.Pathname, nil
}

// ResetPathname resets all changes to the "pathname" field.
func (m *PageMutation) ResetPathname() {
	m.pathname = nil
}

// SetNumber sets the "number" field.
func (m *PageMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *PageMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *PageMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *PageMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *PageMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetTitle sets the "title" field.
func (m *PageMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PageMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PageMutation) ResetTitle() {
	m.title = nil
}

// SetOverviewSentence sets the "overview_sentence" field.
func (m *PageMutation) SetOverviewSentence(s string) {
	m.overview_sentence = &s
}

// OverviewSentence returns the value of the "overview_sentence" field in the mutation.
func (m *PageMutation) OverviewSentence() (r string, exists bool) {
	v := m.overview_sentence
	if v == nil {
		return
	}
	return *v, true
}

// OldOverviewSentence returns the old "overview_sentence" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOverviewSentence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverviewSentence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverviewSentence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverviewSentence: %w", err)
	}
	return oldValue.OverviewSentence, nil
}

// ResetOverviewSentence resets all changes to the "overview_sentence" field.
func (m *PageMutation) ResetOverviewSentence() {
	m.overview_sentence = nil
}

// AddSectionIDs adds the "sections" edge to the Section entity by ids.
func (m *PageMutation) AddSectionIDs(ids ...int) {
	if m.sections == nil {
		m.sections = make(map[int]struct{})
	}
	for i := range ids {
		m.sections[ids[i]] = struct{}{}
	}
}

// ClearSections clears the "sections" edge to the Section entity.
func (m *PageMutation) ClearSections() {
	m.clearedsections = true
}

// SectionsCleared reports if the "sections" edge to the Section entity was cleared.
func (m *PageMutation) SectionsCleared() bool {
	return m.clearedsections
}

// RemoveSectionIDs removes the "sections" edge to the Section entity by IDs.
func (m *PageMutation) RemoveSectionIDs(ids ...int) {
	if m.removedsections == nil {
		m.removedsections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sections, ids[i])
		m.removedsections[ids[i]] = struct{}{}
	}
}

// RemovedSections returns the removed IDs of the "sections" edge to the Section entity.
func (m *PageMutation) RemovedSectionsIDs() (ids []int) {
	for id := range m.removedsections {
		ids = append(ids, id)
	}
	return
}

// SectionsIDs returns the "sections" edge IDs in the mutation.
func (m *PageMutation) SectionsIDs() (ids []int) {
	for id := range m.sections {
		ids = append(ids, id)
	}
	return
}

// ResetSections resets all changes to the "sections" edge.
func (m *PageMutation) ResetSections() {
	m.sections = nil
	m.clearedsections = false
	m.removedsections = nil
}

// Where appends a list predicates to the PageMutation builder.
func (m *PageMutation) Where(ps ...predicate.Page) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Page, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Page).
func (m *PageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PageMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.pathname != nil {
		fields = append(fields, page.FieldPathname)
	}
	if m.number != nil {
		fields = append(fields, page.FieldNumber)
	}
	if m.title != nil {
		fields = append(fields, page.FieldTitle)
	}
	if m.overview_sentence != nil {
		fields = append(fields, page.FieldOverviewSentence)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case page.FieldPathname:
		return m.Pathname()
	case page.FieldNumber:
		return m.Number()
	case page.FieldTitle:
		return m.Title()
	case page.FieldOverviewSentence:
		return m.OverviewSentence()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case page.FieldPathname:
		return m.OldPathname(ctx)
	case page.FieldNumber:
		return m.OldNumber(ctx)
	case page.FieldTitle:
		return m.OldTitle(ctx)
	case page.FieldOverviewSentence:
		return m.OldOverviewSentence(ctx)
	}
	return nil, fmt.Errorf("unknown Page field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case page.FieldPathname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPathname(v)
		return nil
	case page.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case page.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case page.FieldOverviewSentence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverviewSentence(v)
		return nil
	}
	return fmt.Errorf("unknown Page field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PageMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, page.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case page.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case page.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Page numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Page nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PageMutation) ResetField(name string) error {
	switch name {
	case page.FieldPathname:
		m.ResetPathname()
		return nil
	case page.FieldNumber:
		m.ResetNumber()
		return nil
	case page.FieldTitle:
		m.ResetTitle()
		return nil
	case page.FieldOverviewSentence:
		m.ResetOverviewSentence()
		return nil
	}
	return fmt.Errorf("unknown Page field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sections != nil {
		edges = append(edges, page.EdgeSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case page.EdgeSections:
		ids := make([]ent.Value, 0, len(m.sections))
		for id := range m.sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsections != nil {
		edges = append(edges, page.EdgeSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case page.EdgeSections:
		ids := make([]ent.Value, 0, len(m.removedsections))
		for id := range m.removedsections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsections {
		edges = append(edges, page.EdgeSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PageMutation) EdgeCleared(name string) bool {
	switch name {
	case page.EdgeSections:
		return m.clearedsections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Page unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PageMutation) ResetEdge(name string) error {
	switch name {
	case page.EdgeSections:
		m.ResetSections()
		return nil
	}
	return fmt.Errorf("unknown Page edge %s", name)
}

// RemoteMutation represents an operation that mutates the Remote nodes in the graph.
type RemoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	url           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Remote, error)
	predicates    []predicate.Remote
}

var _ ent.Mutation = (*RemoteMutation)(nil)

// remoteOption allows management of the mutation configuration using functional options.
type remoteOption func(*RemoteMutation)

// newRemoteMutation creates new mutation for the Remote entity.
func newRemoteMutation(c config, op Op, opts ...remoteOption) *RemoteMutation {
	m := &RemoteMutation{
		config:        c,
		op:            op,
		typ:           TypeRemote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRemoteID sets the ID field of the mutation.
func withRemoteID(id int) remoteOption {
	return func(m *RemoteMutation) {
		var (
			err   error
			once  sync.Once
			value *Remote
		)
		m.oldValue = func(ctx context.Context) (*Remote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Remote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRemote sets the old Remote of the mutation.
func withRemote(node *Remote) remoteOption {
	return func(m *RemoteMutation) {
		m.oldValue = func(context.Context) (*Remote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RemoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RemoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RemoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RemoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Remote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RemoteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RemoteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Remote entity.
// If the Remote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemoteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RemoteMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *RemoteMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *RemoteMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Remote entity.
// If the Remote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemoteMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *RemoteMutation) ResetURL() {
	m.url = nil
}

// Where appends a list predicates to the RemoteMutation builder.
func (m *RemoteMutation) Where(ps ...predicate.Remote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RemoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RemoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Remote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RemoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RemoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Remote).
func (m *RemoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RemoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, remote.FieldName)
	}
	if m.url != nil {
		fields = append(fields, remote.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RemoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case remote.FieldName:
		return m.Name()
	case remote.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RemoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case remote.FieldName:
		return m.OldName(ctx)
	case remote.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown Remote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case remote.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case remote.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown Remote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RemoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RemoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Remote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RemoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RemoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RemoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Remote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RemoteMutation) ResetField(name string) error {
	switch name {
	case remote.FieldName:
		m.ResetName()
		return nil
	case remote.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown Remote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RemoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RemoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RemoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RemoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RemoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RemoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RemoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Remote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RemoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Remote edge %s", name)
}

// SectionMutation represents an operation that mutates the Section nodes in the graph.
type SectionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	slug              *string
	title             *string
	overview_sentence *string
	number            *int
	addnumber         *int
	clearedFields     map[string]struct{}
	page              *int
	clearedpage       bool
	commits           map[int]struct{}
	removedcommits    map[int]struct{}
	clearedcommits    bool
	done              bool
	oldValue          func(context.Context) (*Section, error)
	predicates        []predicate.Section
}

var _ ent.Mutation = (*SectionMutation)(nil)

// sectionOption allows management of the mutation configuration using functional options.
type sectionOption func(*SectionMutation)

// newSectionMutation creates new mutation for the Section entity.
func newSectionMutation(c config, op Op, opts ...sectionOption) *SectionMutation {
	m := &SectionMutation{
		config:        c,
		op:            op,
		typ:           TypeSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSectionID sets the ID field of the mutation.
func withSectionID(id int) sectionOption {
	return func(m *SectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Section
		)
		m.oldValue = func(ctx context.Context) (*Section, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Section.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSection sets the old Section of the mutation.
func withSection(node *Section) sectionOption {
	return func(m *SectionMutation) {
		m.oldValue = func(context.Context) (*Section, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Section.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSlug sets the "slug" field.
func (m *SectionMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *SectionMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Section entity.
// If the Section object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SectionMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *SectionMutation) ResetSlug() {
	m.slug = nil
}

// SetTitle sets the "title" field.
func (m *SectionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SectionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Section entity.
// If the Section object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SectionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SectionMutation) ResetTitle() {
	m.title = nil
}

// SetOverviewSentence sets the "overview_sentence" field.
func (m *SectionMutation) SetOverviewSentence(s string) {
	m.overview_sentence = &s
}

// OverviewSentence returns the value of the "overview_sentence" field in the mutation.
func (m *SectionMutation) OverviewSentence() (r string, exists bool) {
	v := m.overview_sentence
	if v == nil {
		return
	}
	return *v, true
}

// OldOverviewSentence returns the old "overview_sentence" field's value of the Section entity.
// If the Section object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SectionMutation) OldOverviewSentence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverviewSentence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverviewSentence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverviewSentence: %w", err)
	}
	return oldValue.OverviewSentence, nil
}

// ResetOverviewSentence resets all changes to the "overview_sentence" field.
func (m *SectionMutation) ResetOverviewSentence() {
	m.overview_sentence = nil
}

// SetNumber sets the "number" field.
func (m *SectionMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *SectionMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Section entity.
// If the Section object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SectionMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *SectionMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *SectionMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *SectionMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetPageID sets the "page" edge to the Page entity by id.
func (m *SectionMutation) SetPageID(id int) {
	m.page = &id
}

// ClearPage clears the "page" edge to the Page entity.
func (m *SectionMutation) ClearPage() {
	m.clearedpage = true
}

// PageCleared reports if the "page" edge to the Page entity was cleared.
func (m *SectionMutation) PageCleared() bool {
	return m.clearedpage
}

// PageID returns the "page" edge ID in the mutation.
func (m *SectionMutation) PageID() (id int, exists bool) {
	if m.page != nil {
		return *m.page, true
	}
	return
}

// PageIDs returns the "page" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PageID instead. It exists only for internal usage by the builders.
func (m *SectionMutation) PageIDs() (ids []int) {
	if id := m.page; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPage resets all changes to the "page" edge.
func (m *SectionMutation) ResetPage() {
	m.page = nil
	m.clearedpage = false
}

// AddCommitIDs adds the "commits" edge to the TitCommit entity by ids.
func (m *SectionMutation) AddCommitIDs(ids ...int) {
	if m.commits == nil {
		m.commits = make(map[int]struct{})
	}
	for i := range ids {
		m.commits[ids[i]] = struct{}{}
	}
}

// ClearCommits clears the "commits" edge to the TitCommit entity.
func (m *SectionMutation) ClearCommits() {
	m.clearedcommits = true
}

// CommitsCleared reports if the "commits" edge to the TitCommit entity was cleared.
func (m *SectionMutation) CommitsCleared() bool {
	return m.clearedcommits
}

// RemoveCommitIDs removes the "commits" edge to the TitCommit entity by IDs.
func (m *SectionMutation) RemoveCommitIDs(ids ...int) {
	if m.removedcommits == nil {
		m.removedcommits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.commits, ids[i])
		m.removedcommits[ids[i]] = struct{}{}
	}
}

// RemovedCommits returns the removed IDs of the "commits" edge to the TitCommit entity.
func (m *SectionMutation) RemovedCommitsIDs() (ids []int) {
	for id := range m.removedcommits {
		ids = append(ids, id)
	}
	return
}

// CommitsIDs returns the "commits" edge IDs in the mutation.
func (m *SectionMutation) CommitsIDs() (ids []int) {
	for id := range m.commits {
		ids = append(ids, id)
	}
	return
}

// ResetCommits resets all changes to the "commits" edge.
func (m *SectionMutation) ResetCommits() {
	m.commits = nil
	m.clearedcommits = false
	m.removedcommits = nil
}

// Where appends a list predicates to the SectionMutation builder.
func (m *SectionMutation) Where(ps ...predicate.Section) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Section, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Section).
func (m *SectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SectionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.slug != nil {
		fields = append(fields, section.FieldSlug)
	}
	if m.title != nil {
		fields = append(fields, section.FieldTitle)
	}
	if m.overview_sentence != nil {
		fields = append(fields, section.FieldOverviewSentence)
	}
	if m.number != nil {
		fields = append(fields, section.FieldNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case section.FieldSlug:
		return m.Slug()
	case section.FieldTitle:
		return m.Title()
	case section.FieldOverviewSentence:
		return m.OverviewSentence()
	case section.FieldNumber:
		return m.Number()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case section.FieldSlug:
		return m.OldSlug(ctx)
	case section.FieldTitle:
		return m.OldTitle(ctx)
	case section.FieldOverviewSentence:
		return m.OldOverviewSentence(ctx)
	case section.FieldNumber:
		return m.OldNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Section field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case section.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case section.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case section.FieldOverviewSentence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverviewSentence(v)
		return nil
	case section.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SectionMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, section.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case section.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case section.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Section numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Section nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SectionMutation) ResetField(name string) error {
	switch name {
	case section.FieldSlug:
		m.ResetSlug()
		return nil
	case section.FieldTitle:
		m.ResetTitle()
		return nil
	case section.FieldOverviewSentence:
		m.ResetOverviewSentence()
		return nil
	case section.FieldNumber:
		m.ResetNumber()
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.page != nil {
		edges = append(edges, section.EdgePage)
	}
	if m.commits != nil {
		edges = append(edges, section.EdgeCommits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case section.EdgePage:
		if id := m.page; id != nil {
			return []ent.Value{*id}
		}
	case section.EdgeCommits:
		ids := make([]ent.Value, 0, len(m.commits))
		for id := range m.commits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcommits != nil {
		edges = append(edges, section.EdgeCommits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case section.EdgeCommits:
		ids := make([]ent.Value, 0, len(m.removedcommits))
		for id := range m.removedcommits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpage {
		edges = append(edges, section.EdgePage)
	}
	if m.clearedcommits {
		edges = append(edges, section.EdgeCommits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SectionMutation) EdgeCleared(name string) bool {
	switch name {
	case section.EdgePage:
		return m.clearedpage
	case section.EdgeCommits:
		return m.clearedcommits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SectionMutation) ClearEdge(name string) error {
	switch name {
	case section.EdgePage:
		m.ClearPage()
		return nil
	}
	return fmt.Errorf("unknown Section unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SectionMutation) ResetEdge(name string) error {
	switch name {
	case section.EdgePage:
		m.ResetPage()
		return nil
	case section.EdgeCommits:
		m.ResetCommits()
		return nil
	}
	return fmt.Errorf("unknown Section edge %s", name)
}

// StagedFileMutation represents an operation that mutates the StagedFile nodes in the graph.
type StagedFileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_path         *string
	content       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*StagedFile, error)
	predicates    []predicate.StagedFile
}

var _ ent.Mutation = (*StagedFileMutation)(nil)

// stagedfileOption allows management of the mutation configuration using functional options.
type stagedfileOption func(*StagedFileMutation)

// newStagedFileMutation creates new mutation for the StagedFile entity.
func newStagedFileMutation(c config, op Op, opts ...stagedfileOption) *StagedFileMutation {
	m := &StagedFileMutation{
		config:        c,
		op:            op,
		typ:           TypeStagedFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStagedFileID sets the ID field of the mutation.
func withStagedFileID(id int) stagedfileOption {
	return func(m *StagedFileMutation) {
		var (
			err   error
			once  sync.Once
			value *StagedFile
		)
		m.oldValue = func(ctx context.Context) (*StagedFile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StagedFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStagedFile sets the old StagedFile of the mutation.
func withStagedFile(node *StagedFile) stagedfileOption {
	return func(m *StagedFileMutation) {
		m.oldValue = func(context.Context) (*StagedFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StagedFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StagedFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StagedFileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StagedFileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StagedFile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPath sets the "path" field.
func (m *StagedFileMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *StagedFileMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the StagedFile entity.
// If the StagedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StagedFileMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *StagedFileMutation) ResetPath() {
	m._path = nil
}

// SetContent sets the "content" field.
func (m *StagedFileMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *StagedFileMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the StagedFile entity.
// If the StagedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StagedFileMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *StagedFileMutation) ResetContent() {
	m.content = nil
}

// Where appends a list predicates to the StagedFileMutation builder.
func (m *StagedFileMutation) Where(ps ...predicate.StagedFile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StagedFileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StagedFileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StagedFile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StagedFileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StagedFileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StagedFile).
func (m *StagedFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StagedFileMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._path != nil {
		fields = append(fields, stagedfile.FieldPath)
	}
	if m.content != nil {
		fields = append(fields, stagedfile.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StagedFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stagedfile.FieldPath:
		return m.Path()
	case stagedfile.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StagedFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stagedfile.FieldPath:
		return m.OldPath(ctx)
	case stagedfile.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown StagedFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StagedFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stagedfile.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case stagedfile.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown StagedFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StagedFileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StagedFileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StagedFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StagedFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StagedFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StagedFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StagedFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StagedFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StagedFileMutation) ResetField(name string) error {
	switch name {
	case stagedfile.FieldPath:
		m.ResetPath()
		return nil
	case stagedfile.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown StagedFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StagedFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StagedFileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StagedFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StagedFileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StagedFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StagedFileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StagedFileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StagedFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StagedFileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StagedFile edge %s", name)
}

// TitCommitMutation represents an operation that mutates the TitCommit nodes in the graph.
type TitCommitMutation struct {
	config
	op             Op
	typ            string
	id             *int
	number         *int
	addnumber      *int
	message        *string
	clearedFields  map[string]struct{}
	section        *int
	clearedsection bool
	files          map[int]struct{}
	removedfiles   map[int]struct{}
	clearedfiles   bool
	images         map[uuid.UUID]struct{}
	removedimages  map[uuid.UUID]struct{}
	clearedimages  bool
	done           bool
	oldValue       func(context.Context) (*TitCommit, error)
	predicates     []predicate.TitCommit
}

var _ ent.Mutation = (*TitCommitMutation)(nil)

// titcommitOption allows management of the mutation configuration using functional options.
type titcommitOption func(*TitCommitMutation)

// newTitCommitMutation creates new mutation for the TitCommit entity.
func newTitCommitMutation(c config, op Op, opts ...titcommitOption) *TitCommitMutation {
	m := &TitCommitMutation{
		config:        c,
		op:            op,
		typ:           TypeTitCommit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTitCommitID sets the ID field of the mutation.
func withTitCommitID(id int) titcommitOption {
	return func(m *TitCommitMutation) {
		var (
			err   error
			once  sync.Once
			value *TitCommit
		)
		m.oldValue = func(ctx context.Context) (*TitCommit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TitCommit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTitCommit sets the old TitCommit of the mutation.
func withTitCommit(node *TitCommit) titcommitOption {
	return func(m *TitCommitMutation) {
		m.oldValue = func(context.Context) (*TitCommit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TitCommitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TitCommitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TitCommitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TitCommitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TitCommit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *TitCommitMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *TitCommitMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the TitCommit entity.
// If the TitCommit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TitCommitMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *TitCommitMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *TitCommitMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *TitCommitMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetMessage sets the "message" field.
func (m *TitCommitMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *TitCommitMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the TitCommit entity.
// If the TitCommit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TitCommitMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *TitCommitMutation) ResetMessage() {
	m.message = nil
}

// SetSectionID sets the "section" edge to the Section entity by id.
func (m *TitCommitMutation) SetSectionID(id int) {
	m.section = &id
}

// ClearSection clears the "section" edge to the Section entity.
func (m *TitCommitMutation) ClearSection() {
	m.clearedsection = true
}

// SectionCleared reports if the "section" edge to the Section entity was cleared.
func (m *TitCommitMutation) SectionCleared() bool {
	return m.clearedsection
}

// SectionID returns the "section" edge ID in the mutation.
func (m *TitCommitMutation) SectionID() (id int, exists bool) {
	if m.section != nil {
		return *m.section, true
	}
	return
}

// SectionIDs returns the "section" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SectionID instead. It exists only for internal usage by the builders.
func (m *TitCommitMutation) SectionIDs() (ids []int) {
	if id := m.section; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSection resets all changes to the "section" edge.
func (m *TitCommitMutation) ResetSection() {
	m.section = nil
	m.clearedsection = false
}

// AddFileIDs adds the "files" edge to the CommittedFile entity by ids.
func (m *TitCommitMutation) AddFileIDs(ids ...int) {
	if m.files == nil {
		m.files = make(map[int]struct{})
	}
	for i := range ids {
		m.files[ids[i]] = struct{}{}
	}
}

// ClearFiles clears the "files" edge to the CommittedFile entity.
func (m *TitCommitMutation) ClearFiles() {
	m.clearedfiles = true
}

// FilesCleared reports if the "files" edge to the CommittedFile entity was cleared.
func (m *TitCommitMutation) FilesCleared() bool {
	return m.clearedfiles
}

// RemoveFileIDs removes the "files" edge to the CommittedFile entity by IDs.
func (m *TitCommitMutation) RemoveFileIDs(ids ...int) {
	if m.removedfiles == nil {
		m.removedfiles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.files, ids[i])
		m.removedfiles[ids[i]] = struct{}{}
	}
}

// RemovedFiles returns the removed IDs of the "files" edge to the CommittedFile entity.
func (m *TitCommitMutation) RemovedFilesIDs() (ids []int) {
	for id := range m.removedfiles {
		ids = append(ids, id)
	}
	return
}

// FilesIDs returns the "files" edge IDs in the mutation.
func (m *TitCommitMutation) FilesIDs() (ids []int) {
	for id := range m.files {
		ids = append(ids, id)
	}
	return
}

// ResetFiles resets all changes to the "files" edge.
func (m *TitCommitMutation) ResetFiles() {
	m.files = nil
	m.clearedfiles = false
	m.removedfiles = nil
}

// AddImageIDs adds the "images" edge to the Image entity by ids.
func (m *TitCommitMutation) AddImageIDs(ids ...uuid.UUID) {
	if m.images == nil {
		m.images = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Image entity.
func (m *TitCommitMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Image entity was cleared.
func (m *TitCommitMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Image entity by IDs.
func (m *TitCommitMutation) RemoveImageIDs(ids ...uuid.UUID) {
	if m.removedimages == nil {
		m.removedimages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Image entity.
func (m *TitCommitMutation) RemovedImagesIDs() (ids []uuid.UUID) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *TitCommitMutation) ImagesIDs() (ids []uuid.UUID) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *TitCommitMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// Where appends a list predicates to the TitCommitMutation builder.
func (m *TitCommitMutation) Where(ps ...predicate.TitCommit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TitCommitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TitCommitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TitCommit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TitCommitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TitCommitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TitCommit).
func (m *TitCommitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TitCommitMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.number != nil {
		fields = append(fields, titcommit.FieldNumber)
	}
	if m.message != nil {
		fields = append(fields, titcommit.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TitCommitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case titcommit.FieldNumber:
		return m.Number()
	case titcommit.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TitCommitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case titcommit.FieldNumber:
		return m.OldNumber(ctx)
	case titcommit.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown TitCommit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TitCommitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case titcommit.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case titcommit.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown TitCommit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TitCommitMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, titcommit.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TitCommitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case titcommit.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TitCommitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case titcommit.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown TitCommit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TitCommitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TitCommitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TitCommitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TitCommit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TitCommitMutation) ResetField(name string) error {
	switch name {
	case titcommit.FieldNumber:
		m.ResetNumber()
		return nil
	case titcommit.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown TitCommit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TitCommitMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.section != nil {
		edges = append(edges, titcommit.EdgeSection)
	}
	if m.files != nil {
		edges = append(edges, titcommit.EdgeFiles)
	}
	if m.images != nil {
		edges = append(edges, titcommit.EdgeImages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TitCommitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case titcommit.EdgeSection:
		if id := m.section; id != nil {
			return []ent.Value{*id}
		}
	case titcommit.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.files))
		for id := range m.files {
			ids = append(ids, id)
		}
		return ids
	case titcommit.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TitCommitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfiles != nil {
		edges = append(edges, titcommit.EdgeFiles)
	}
	if m.removedimages != nil {
		edges = append(edges, titcommit.EdgeImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TitCommitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case titcommit.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.removedfiles))
		for id := range m.removedfiles {
			ids = append(ids, id)
		}
		return ids
	case titcommit.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TitCommitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsection {
		edges = append(edges, titcommit.EdgeSection)
	}
	if m.clearedfiles {
		edges = append(edges, titcommit.EdgeFiles)
	}
	if m.clearedimages {
		edges = append(edges, titcommit.EdgeImages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TitCommitMutation) EdgeCleared(name string) bool {
	switch name {
	case titcommit.EdgeSection:
		return m.clearedsection
	case titcommit.EdgeFiles:
		return m.clearedfiles
	case titcommit.EdgeImages:
		return m.clearedimages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TitCommitMutation) ClearEdge(name string) error {
	switch name {
	case titcommit.EdgeSection:
		m.ClearSection()
		return nil
	}
	return fmt.Errorf("unknown TitCommit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TitCommitMutation) ResetEdge(name string) error {
	switch name {
	case titcommit.EdgeSection:
		m.ResetSection()
		return nil
	case titcommit.EdgeFiles:
		m.ResetFiles()
		return nil
	case titcommit.EdgeImages:
		m.ResetImages()
		return nil
	}
	return fmt.Errorf("unknown TitCommit edge %s", name)
}
