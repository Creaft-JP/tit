// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
	"github.com/Creaft-JP/tit/db/local/ent/image"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
	"github.com/Creaft-JP/tit/db/local/ent/section"
	"github.com/Creaft-JP/tit/db/local/ent/titcommit"
	"github.com/google/uuid"
)

// TitCommitUpdate is the builder for updating TitCommit entities.
type TitCommitUpdate struct {
	config
	hooks    []Hook
	mutation *TitCommitMutation
}

// Where appends a list predicates to the TitCommitUpdate builder.
func (tcu *TitCommitUpdate) Where(ps ...predicate.TitCommit) *TitCommitUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetNumber sets the "number" field.
func (tcu *TitCommitUpdate) SetNumber(i int) *TitCommitUpdate {
	tcu.mutation.ResetNumber()
	tcu.mutation.SetNumber(i)
	return tcu
}

// AddNumber adds i to the "number" field.
func (tcu *TitCommitUpdate) AddNumber(i int) *TitCommitUpdate {
	tcu.mutation.AddNumber(i)
	return tcu
}

// SetMessage sets the "message" field.
func (tcu *TitCommitUpdate) SetMessage(s string) *TitCommitUpdate {
	tcu.mutation.SetMessage(s)
	return tcu
}

// SetSectionID sets the "section" edge to the Section entity by ID.
func (tcu *TitCommitUpdate) SetSectionID(id int) *TitCommitUpdate {
	tcu.mutation.SetSectionID(id)
	return tcu
}

// SetNillableSectionID sets the "section" edge to the Section entity by ID if the given value is not nil.
func (tcu *TitCommitUpdate) SetNillableSectionID(id *int) *TitCommitUpdate {
	if id != nil {
		tcu = tcu.SetSectionID(*id)
	}
	return tcu
}

// SetSection sets the "section" edge to the Section entity.
func (tcu *TitCommitUpdate) SetSection(s *Section) *TitCommitUpdate {
	return tcu.SetSectionID(s.ID)
}

// AddFileIDs adds the "files" edge to the CommittedFile entity by IDs.
func (tcu *TitCommitUpdate) AddFileIDs(ids ...int) *TitCommitUpdate {
	tcu.mutation.AddFileIDs(ids...)
	return tcu
}

// AddFiles adds the "files" edges to the CommittedFile entity.
func (tcu *TitCommitUpdate) AddFiles(c ...*CommittedFile) *TitCommitUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tcu.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (tcu *TitCommitUpdate) AddImageIDs(ids ...uuid.UUID) *TitCommitUpdate {
	tcu.mutation.AddImageIDs(ids...)
	return tcu
}

// AddImages adds the "images" edges to the Image entity.
func (tcu *TitCommitUpdate) AddImages(i ...*Image) *TitCommitUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tcu.AddImageIDs(ids...)
}

// Mutation returns the TitCommitMutation object of the builder.
func (tcu *TitCommitUpdate) Mutation() *TitCommitMutation {
	return tcu.mutation
}

// ClearSection clears the "section" edge to the Section entity.
func (tcu *TitCommitUpdate) ClearSection() *TitCommitUpdate {
	tcu.mutation.ClearSection()
	return tcu
}

// ClearFiles clears all "files" edges to the CommittedFile entity.
func (tcu *TitCommitUpdate) ClearFiles() *TitCommitUpdate {
	tcu.mutation.ClearFiles()
	return tcu
}

// RemoveFileIDs removes the "files" edge to CommittedFile entities by IDs.
func (tcu *TitCommitUpdate) RemoveFileIDs(ids ...int) *TitCommitUpdate {
	tcu.mutation.RemoveFileIDs(ids...)
	return tcu
}

// RemoveFiles removes "files" edges to CommittedFile entities.
func (tcu *TitCommitUpdate) RemoveFiles(c ...*CommittedFile) *TitCommitUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tcu.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (tcu *TitCommitUpdate) ClearImages() *TitCommitUpdate {
	tcu.mutation.ClearImages()
	return tcu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (tcu *TitCommitUpdate) RemoveImageIDs(ids ...uuid.UUID) *TitCommitUpdate {
	tcu.mutation.RemoveImageIDs(ids...)
	return tcu
}

// RemoveImages removes "images" edges to Image entities.
func (tcu *TitCommitUpdate) RemoveImages(i ...*Image) *TitCommitUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tcu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TitCommitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TitCommitUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TitCommitUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TitCommitUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TitCommitUpdate) check() error {
	if v, ok := tcu.mutation.Number(); ok {
		if err := titcommit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "TitCommit.number": %w`, err)}
		}
	}
	if v, ok := tcu.mutation.Message(); ok {
		if err := titcommit.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "TitCommit.message": %w`, err)}
		}
	}
	return nil
}

func (tcu *TitCommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(titcommit.Table, titcommit.Columns, sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Number(); ok {
		_spec.SetField(titcommit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedNumber(); ok {
		_spec.AddField(titcommit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.Message(); ok {
		_spec.SetField(titcommit.FieldMessage, field.TypeString, value)
	}
	if tcu.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   titcommit.SectionTable,
			Columns: []string{titcommit.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   titcommit.SectionTable,
			Columns: []string{titcommit.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !tcu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   titcommit.ImagesTable,
			Columns: titcommit.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !tcu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   titcommit.ImagesTable,
			Columns: titcommit.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   titcommit.ImagesTable,
			Columns: titcommit.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{titcommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TitCommitUpdateOne is the builder for updating a single TitCommit entity.
type TitCommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TitCommitMutation
}

// SetNumber sets the "number" field.
func (tcuo *TitCommitUpdateOne) SetNumber(i int) *TitCommitUpdateOne {
	tcuo.mutation.ResetNumber()
	tcuo.mutation.SetNumber(i)
	return tcuo
}

// AddNumber adds i to the "number" field.
func (tcuo *TitCommitUpdateOne) AddNumber(i int) *TitCommitUpdateOne {
	tcuo.mutation.AddNumber(i)
	return tcuo
}

// SetMessage sets the "message" field.
func (tcuo *TitCommitUpdateOne) SetMessage(s string) *TitCommitUpdateOne {
	tcuo.mutation.SetMessage(s)
	return tcuo
}

// SetSectionID sets the "section" edge to the Section entity by ID.
func (tcuo *TitCommitUpdateOne) SetSectionID(id int) *TitCommitUpdateOne {
	tcuo.mutation.SetSectionID(id)
	return tcuo
}

// SetNillableSectionID sets the "section" edge to the Section entity by ID if the given value is not nil.
func (tcuo *TitCommitUpdateOne) SetNillableSectionID(id *int) *TitCommitUpdateOne {
	if id != nil {
		tcuo = tcuo.SetSectionID(*id)
	}
	return tcuo
}

// SetSection sets the "section" edge to the Section entity.
func (tcuo *TitCommitUpdateOne) SetSection(s *Section) *TitCommitUpdateOne {
	return tcuo.SetSectionID(s.ID)
}

// AddFileIDs adds the "files" edge to the CommittedFile entity by IDs.
func (tcuo *TitCommitUpdateOne) AddFileIDs(ids ...int) *TitCommitUpdateOne {
	tcuo.mutation.AddFileIDs(ids...)
	return tcuo
}

// AddFiles adds the "files" edges to the CommittedFile entity.
func (tcuo *TitCommitUpdateOne) AddFiles(c ...*CommittedFile) *TitCommitUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tcuo.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (tcuo *TitCommitUpdateOne) AddImageIDs(ids ...uuid.UUID) *TitCommitUpdateOne {
	tcuo.mutation.AddImageIDs(ids...)
	return tcuo
}

// AddImages adds the "images" edges to the Image entity.
func (tcuo *TitCommitUpdateOne) AddImages(i ...*Image) *TitCommitUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tcuo.AddImageIDs(ids...)
}

// Mutation returns the TitCommitMutation object of the builder.
func (tcuo *TitCommitUpdateOne) Mutation() *TitCommitMutation {
	return tcuo.mutation
}

// ClearSection clears the "section" edge to the Section entity.
func (tcuo *TitCommitUpdateOne) ClearSection() *TitCommitUpdateOne {
	tcuo.mutation.ClearSection()
	return tcuo
}

// ClearFiles clears all "files" edges to the CommittedFile entity.
func (tcuo *TitCommitUpdateOne) ClearFiles() *TitCommitUpdateOne {
	tcuo.mutation.ClearFiles()
	return tcuo
}

// RemoveFileIDs removes the "files" edge to CommittedFile entities by IDs.
func (tcuo *TitCommitUpdateOne) RemoveFileIDs(ids ...int) *TitCommitUpdateOne {
	tcuo.mutation.RemoveFileIDs(ids...)
	return tcuo
}

// RemoveFiles removes "files" edges to CommittedFile entities.
func (tcuo *TitCommitUpdateOne) RemoveFiles(c ...*CommittedFile) *TitCommitUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tcuo.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (tcuo *TitCommitUpdateOne) ClearImages() *TitCommitUpdateOne {
	tcuo.mutation.ClearImages()
	return tcuo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (tcuo *TitCommitUpdateOne) RemoveImageIDs(ids ...uuid.UUID) *TitCommitUpdateOne {
	tcuo.mutation.RemoveImageIDs(ids...)
	return tcuo
}

// RemoveImages removes "images" edges to Image entities.
func (tcuo *TitCommitUpdateOne) RemoveImages(i ...*Image) *TitCommitUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tcuo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the TitCommitUpdate builder.
func (tcuo *TitCommitUpdateOne) Where(ps ...predicate.TitCommit) *TitCommitUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TitCommitUpdateOne) Select(field string, fields ...string) *TitCommitUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TitCommit entity.
func (tcuo *TitCommitUpdateOne) Save(ctx context.Context) (*TitCommit, error) {
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TitCommitUpdateOne) SaveX(ctx context.Context) *TitCommit {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TitCommitUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TitCommitUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TitCommitUpdateOne) check() error {
	if v, ok := tcuo.mutation.Number(); ok {
		if err := titcommit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "TitCommit.number": %w`, err)}
		}
	}
	if v, ok := tcuo.mutation.Message(); ok {
		if err := titcommit.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "TitCommit.message": %w`, err)}
		}
	}
	return nil
}

func (tcuo *TitCommitUpdateOne) sqlSave(ctx context.Context) (_node *TitCommit, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(titcommit.Table, titcommit.Columns, sqlgraph.NewFieldSpec(titcommit.FieldID, field.TypeInt))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TitCommit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, titcommit.FieldID)
		for _, f := range fields {
			if !titcommit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != titcommit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Number(); ok {
		_spec.SetField(titcommit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedNumber(); ok {
		_spec.AddField(titcommit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.Message(); ok {
		_spec.SetField(titcommit.FieldMessage, field.TypeString, value)
	}
	if tcuo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   titcommit.SectionTable,
			Columns: []string{titcommit.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   titcommit.SectionTable,
			Columns: []string{titcommit.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !tcuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titcommit.FilesTable,
			Columns: []string{titcommit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   titcommit.ImagesTable,
			Columns: titcommit.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !tcuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   titcommit.ImagesTable,
			Columns: titcommit.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   titcommit.ImagesTable,
			Columns: titcommit.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TitCommit{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{titcommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
