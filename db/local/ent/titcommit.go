// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Creaft-JP/tit/db/local/ent/section"
	"github.com/Creaft-JP/tit/db/local/ent/titcommit"
)

// TitCommit is the model entity for the TitCommit schema.
type TitCommit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TitCommitQuery when eager-loading is set.
	Edges           TitCommitEdges `json:"edges"`
	section_commits *int
	selectValues    sql.SelectValues
}

// TitCommitEdges holds the relations/edges for other nodes in the graph.
type TitCommitEdges struct {
	// Section holds the value of the section edge.
	Section *Section `json:"section,omitempty"`
	// Files holds the value of the files edge.
	Files []*CommittedFile `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TitCommitEdges) SectionOrErr() (*Section, error) {
	if e.loadedTypes[0] {
		if e.Section == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: section.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e TitCommitEdges) FilesOrErr() ([]*CommittedFile, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TitCommit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case titcommit.FieldID, titcommit.FieldNumber:
			values[i] = new(sql.NullInt64)
		case titcommit.FieldMessage:
			values[i] = new(sql.NullString)
		case titcommit.ForeignKeys[0]: // section_commits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TitCommit fields.
func (tc *TitCommit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case titcommit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case titcommit.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				tc.Number = int(value.Int64)
			}
		case titcommit.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				tc.Message = value.String
			}
		case titcommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field section_commits", value)
			} else if value.Valid {
				tc.section_commits = new(int)
				*tc.section_commits = int(value.Int64)
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TitCommit.
// This includes values selected through modifiers, order, etc.
func (tc *TitCommit) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QuerySection queries the "section" edge of the TitCommit entity.
func (tc *TitCommit) QuerySection() *SectionQuery {
	return NewTitCommitClient(tc.config).QuerySection(tc)
}

// QueryFiles queries the "files" edge of the TitCommit entity.
func (tc *TitCommit) QueryFiles() *CommittedFileQuery {
	return NewTitCommitClient(tc.config).QueryFiles(tc)
}

// Update returns a builder for updating this TitCommit.
// Note that you need to call TitCommit.Unwrap() before calling this method if this TitCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TitCommit) Update() *TitCommitUpdateOne {
	return NewTitCommitClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TitCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TitCommit) Unwrap() *TitCommit {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TitCommit is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TitCommit) String() string {
	var builder strings.Builder
	builder.WriteString("TitCommit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", tc.Number))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(tc.Message)
	builder.WriteByte(')')
	return builder.String()
}

// TitCommits is a parsable slice of TitCommit.
type TitCommits []*TitCommit
