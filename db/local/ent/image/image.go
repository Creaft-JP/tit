// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExtension holds the string denoting the extension field in the database.
	FieldExtension = "extension"
	// FieldContents holds the string denoting the contents field in the database.
	FieldContents = "contents"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeCommit holds the string denoting the commit edge name in mutations.
	EdgeCommit = "commit"
	// Table holds the table name of the image in the database.
	Table = "images"
	// CommitTable is the table that holds the commit relation/edge. The primary key declared below.
	CommitTable = "tit_commit_images"
	// CommitInverseTable is the table name for the TitCommit entity.
	// It exists in this package in order to avoid circular dependency with the "titcommit" package.
	CommitInverseTable = "tit_commits"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldExtension,
	FieldContents,
	FieldDescription,
}

var (
	// CommitPrimaryKey and CommitColumn2 are the table columns denoting the
	// primary key for the commit relation (M2M).
	CommitPrimaryKey = []string{"tit_commit_id", "image_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ExtensionValidator is a validator for the "extension" field. It is called by the builders before save.
	ExtensionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExtension orders the results by the extension field.
func ByExtension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtension, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCommitCount orders the results by commit count.
func ByCommitCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommitStep(), opts...)
	}
}

// ByCommit orders the results by commit terms.
func ByCommit(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommitStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCommitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CommitTable, CommitPrimaryKey...),
	)
}
