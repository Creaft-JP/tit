// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Creaft-JP/tit/db/local/ent/commit"
	"github.com/Creaft-JP/tit/db/local/ent/committedfile"
	"github.com/Creaft-JP/tit/db/local/ent/predicate"
)

// CommitUpdate is the builder for updating Commit entities.
type CommitUpdate struct {
	config
	hooks    []Hook
	mutation *CommitMutation
}

// Where appends a list predicates to the CommitUpdate builder.
func (cu *CommitUpdate) Where(ps ...predicate.Commit) *CommitUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetNumber sets the "number" field.
func (cu *CommitUpdate) SetNumber(i int) *CommitUpdate {
	cu.mutation.ResetNumber()
	cu.mutation.SetNumber(i)
	return cu
}

// AddNumber adds i to the "number" field.
func (cu *CommitUpdate) AddNumber(i int) *CommitUpdate {
	cu.mutation.AddNumber(i)
	return cu
}

// SetMessage sets the "message" field.
func (cu *CommitUpdate) SetMessage(s string) *CommitUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// AddFileIDs adds the "files" edge to the CommittedFile entity by IDs.
func (cu *CommitUpdate) AddFileIDs(ids ...int) *CommitUpdate {
	cu.mutation.AddFileIDs(ids...)
	return cu
}

// AddFiles adds the "files" edges to the CommittedFile entity.
func (cu *CommitUpdate) AddFiles(c ...*CommittedFile) *CommitUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddFileIDs(ids...)
}

// Mutation returns the CommitMutation object of the builder.
func (cu *CommitUpdate) Mutation() *CommitMutation {
	return cu.mutation
}

// ClearFiles clears all "files" edges to the CommittedFile entity.
func (cu *CommitUpdate) ClearFiles() *CommitUpdate {
	cu.mutation.ClearFiles()
	return cu
}

// RemoveFileIDs removes the "files" edge to CommittedFile entities by IDs.
func (cu *CommitUpdate) RemoveFileIDs(ids ...int) *CommitUpdate {
	cu.mutation.RemoveFileIDs(ids...)
	return cu
}

// RemoveFiles removes "files" edges to CommittedFile entities.
func (cu *CommitUpdate) RemoveFiles(c ...*CommittedFile) *CommitUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommitUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommitUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommitUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommitUpdate) check() error {
	if v, ok := cu.mutation.Number(); ok {
		if err := commit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Commit.number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Message(); ok {
		if err := commit.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Commit.message": %w`, err)}
		}
	}
	return nil
}

func (cu *CommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commit.Table, commit.Columns, sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Number(); ok {
		_spec.SetField(commit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedNumber(); ok {
		_spec.AddField(commit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.SetField(commit.FieldMessage, field.TypeString, value)
	}
	if cu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commit.FilesTable,
			Columns: []string{commit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !cu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commit.FilesTable,
			Columns: []string{commit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commit.FilesTable,
			Columns: []string{commit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommitUpdateOne is the builder for updating a single Commit entity.
type CommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommitMutation
}

// SetNumber sets the "number" field.
func (cuo *CommitUpdateOne) SetNumber(i int) *CommitUpdateOne {
	cuo.mutation.ResetNumber()
	cuo.mutation.SetNumber(i)
	return cuo
}

// AddNumber adds i to the "number" field.
func (cuo *CommitUpdateOne) AddNumber(i int) *CommitUpdateOne {
	cuo.mutation.AddNumber(i)
	return cuo
}

// SetMessage sets the "message" field.
func (cuo *CommitUpdateOne) SetMessage(s string) *CommitUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// AddFileIDs adds the "files" edge to the CommittedFile entity by IDs.
func (cuo *CommitUpdateOne) AddFileIDs(ids ...int) *CommitUpdateOne {
	cuo.mutation.AddFileIDs(ids...)
	return cuo
}

// AddFiles adds the "files" edges to the CommittedFile entity.
func (cuo *CommitUpdateOne) AddFiles(c ...*CommittedFile) *CommitUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddFileIDs(ids...)
}

// Mutation returns the CommitMutation object of the builder.
func (cuo *CommitUpdateOne) Mutation() *CommitMutation {
	return cuo.mutation
}

// ClearFiles clears all "files" edges to the CommittedFile entity.
func (cuo *CommitUpdateOne) ClearFiles() *CommitUpdateOne {
	cuo.mutation.ClearFiles()
	return cuo
}

// RemoveFileIDs removes the "files" edge to CommittedFile entities by IDs.
func (cuo *CommitUpdateOne) RemoveFileIDs(ids ...int) *CommitUpdateOne {
	cuo.mutation.RemoveFileIDs(ids...)
	return cuo
}

// RemoveFiles removes "files" edges to CommittedFile entities.
func (cuo *CommitUpdateOne) RemoveFiles(c ...*CommittedFile) *CommitUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the CommitUpdate builder.
func (cuo *CommitUpdateOne) Where(ps ...predicate.Commit) *CommitUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommitUpdateOne) Select(field string, fields ...string) *CommitUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Commit entity.
func (cuo *CommitUpdateOne) Save(ctx context.Context) (*Commit, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommitUpdateOne) SaveX(ctx context.Context) *Commit {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommitUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommitUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommitUpdateOne) check() error {
	if v, ok := cuo.mutation.Number(); ok {
		if err := commit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Commit.number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Message(); ok {
		if err := commit.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Commit.message": %w`, err)}
		}
	}
	return nil
}

func (cuo *CommitUpdateOne) sqlSave(ctx context.Context) (_node *Commit, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commit.Table, commit.Columns, sqlgraph.NewFieldSpec(commit.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Commit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commit.FieldID)
		for _, f := range fields {
			if !commit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Number(); ok {
		_spec.SetField(commit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedNumber(); ok {
		_spec.AddField(commit.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.SetField(commit.FieldMessage, field.TypeString, value)
	}
	if cuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commit.FilesTable,
			Columns: []string{commit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !cuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commit.FilesTable,
			Columns: []string{commit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   commit.FilesTable,
			Columns: []string{commit.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(committedfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Commit{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
